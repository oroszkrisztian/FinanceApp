{"version":3,"file":"budgetControllers.js","sourceRoot":"","sources":["../../../src/controllers/budgetControllers.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context } from \"hono\";\nimport { BudgetService } from \"../services/budgetService\";\nimport { CurrencyType } from \"@prisma/client\";\n\nexport class BudgetController {\n  private budgetService: BudgetService;\n\n  constructor() {\n    this.budgetService = new BudgetService();\n  }\n\n  async getAllBudgets(c: Context, userId: number) {\n    try {\n      if (!userId) {\n        throw \"User id not found\";\n      }\n      const budgets = await this.budgetService.getAllBudgets(userId);\n      return budgets;\n    } catch (error) {\n      console.error(\"Get budgets error:\", error);\n      return c.json({ error: \"Failed to get budgets\" }, 500);\n    }\n  }\n\n  async createUserBudgetWithCategories(\n    c: Context,\n    userId: number,\n    name: string,\n    limitAmount: number,\n    currency: CurrencyType,\n    categoryIds: number[]\n  ) {\n    try {\n      if (!userId) {\n        throw \"User id not found\";\n      }\n      const budget = await this.budgetService.createUserBudgetWithCategories(\n        userId,\n        name,\n        limitAmount,\n        currency,\n        categoryIds\n      );\n      return c.json(budget);\n    } catch (error) {\n      console.error(\"Create budget error:\", error);\n      return c.json({ error: \"Failed to create budget\" }, 500);\n    }\n  }\n\n  async deleteUserBudget(c: Context, userId: number, budgetId: number) {\n    try {\n      if (!userId) {\n        throw \"User id not found\";\n      }\n      const budget = await this.budgetService.deleteUserBudget(\n        userId,\n        budgetId\n      );\n      return c.json(budget);\n    } catch (error) {\n      console.error(\"Delete budget error:\", error);\n      return c.json({ error: \"Failed to delete budget\" }, 500);\n    }\n  }\n\n  async updateUserBudget(\n    c: Context,\n    userId: number,\n    budgetId: number,\n    name: string,\n    limitAmount: number,\n    currency: CurrencyType,\n    categoryIds: number[]\n  ) {\n    try {\n      if (!userId) {\n        throw \"User id not found\";\n      }\n      const budget = await this.budgetService.updateUserBudget(\n        userId,\n        budgetId,\n        name,\n        limitAmount,\n        currency,\n        categoryIds\n      );\n      return c.json(budget);\n    } catch (error) {\n      console.error(\"Update budget error:\", error);\n      return c.json({ error: \"Failed to update budget\" }, 500);\n    }\n  }\n}\n"]}