{"version":3,"file":"accountsController.js","sourceRoot":"","sources":["../../../src/controllers/accountsController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context } from \"hono\";\nimport { AccountsService } from \"../services/accountsService\";\nimport { AccountType, CurrencyType } from \"@prisma/client\";\n\nexport class AccountsController {\n  private accountService: AccountsService;\n  constructor() {\n    this.accountService = new AccountsService();\n  }\n\n  async getAllAccounts(\n    c: Context,\n    userId: number,\n    startDate?: Date,\n    endDate?: Date\n  ) {\n    try {\n      if (!userId) {\n        throw \"User id not found\";\n      }\n      const accounts = await this.accountService.getAllAccounts(\n        userId,\n        startDate,\n        endDate\n      );\n      return c.json(accounts);\n    } catch (error) {\n      console.error(\"Get accounts error:\", error);\n    }\n  }\n\n  async getDefaultAccounts(c: Context, userId: number) {\n    try {\n      if (!userId) {\n        throw \"User id not found\";\n      }\n      const accounts = await this.accountService.getDefaultAccounts(userId);\n      return c.json(accounts);\n    } catch (error) {\n      console.error(\"Get accounts error:\", error);\n    }\n  }\n\n  async getSavingAccounts(c: Context, userId: number) {\n    try {\n      if (!userId) {\n        throw \"User id not found\";\n      }\n      const savingAccounts =\n        await this.accountService.getSavingAccounts(userId);\n      return c.json(savingAccounts);\n    } catch (error) {\n      console.error(\"Get savingAccounts error:\", error);\n    }\n  }\n\n  async createDefaultAccount(\n    c: Context,\n    userId: number,\n    accountType: AccountType,\n    currencyType: CurrencyType,\n    name: string,\n    description: string\n  ) {\n    if (!accountType || !currencyType || !name) {\n      throw \"Fill all necessary fields\";\n    } else if (!userId) {\n      throw \"User id not found\";\n    }\n\n    try {\n      const account = await this.accountService.createDefaultAccount(\n        userId,\n        accountType,\n        currencyType,\n        name,\n        description\n      );\n      return c.json(account);\n    } catch (error) {\n      console.error(\"Create default account error:\", error);\n    }\n  }\n\n  async createSavingAccount(\n    c: Context,\n    userId: number,\n    accountType: AccountType,\n    currencyType: CurrencyType,\n    name: string,\n    description: string,\n    targetAmount: number,\n    targetDate: Date\n  ) {\n    if (!accountType || !currencyType || !name) {\n      throw \"Fill all necessary fields\";\n    } else if (!userId) {\n      throw \"User id not found\";\n    }\n\n    try {\n      const account = await this.accountService.createSavingAccount(\n        userId,\n        accountType,\n        currencyType,\n        name,\n        description,\n        targetAmount,\n        targetDate\n      );\n      return c.json(account);\n    } catch (error) {\n      console.error(\"Create saving account error:\", error);\n    }\n  }\n\n  async searchAccountByString(\n    c: Context,\n    userId: number,\n    searchString: string\n  ) {\n    try {\n      if (!userId) {\n        throw new Error(\"User id not found\");\n      }\n\n      const accounts = await this.accountService.searchAccountByString(\n        userId,\n        searchString\n      );\n\n      return c.json(accounts);\n    } catch (error) {\n      console.error(\"Search account error:\", error);\n      throw error;\n    }\n  }\n\n  async deleteDefaultAccount(c: Context, userId: number, accountId: number) {\n    try {\n      if (!userId) {\n        throw new Error(\"User id not found\");\n      }\n      await this.accountService.deleteDefaultAccount(userId, accountId);\n      return c.json({ message: \"Account deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete account error:\", error);\n      throw error;\n    }\n  }\n\n  async deleteSavingAccount(c: Context, userId: number, accountId: number) {\n    try {\n      if (!userId) {\n        throw new Error(\"User id not found\");\n      }\n      await this.accountService.deleteSavingAccount(userId, accountId);\n      return c.json({ message: \"Account deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete account error:\", error);\n      throw error;\n    }\n  }\n\n  async editDefaultAccount(\n    c: Context,\n    userId: number,\n    accountId: number,\n    name: string,\n    description: string,\n    currency: CurrencyType,\n    accountType: AccountType,\n    amount?: number\n  ) {\n    try {\n      if (!userId) {\n        throw new Error(\"User id not found\");\n      }\n\n      await this.accountService.editDefaultAccount(\n        userId,\n        accountId,\n        name,\n        description,\n        currency,\n        accountType,\n        amount\n      );\n\n      return c.json({ message: \"Account edited successfully\" });\n    } catch (error) {\n      console.error(\"Edit account error:\", error);\n      throw error;\n    }\n  }\n\n  async editSavingAccount(\n    c: Context,\n    userId: number,\n    accountId: number,\n    name: string,\n    description: string,\n    currency: CurrencyType,\n    accountType: AccountType,\n    targetAmount: number,\n    targetDate: Date\n  ) {\n    try {\n      if (!userId) {\n        throw new Error(\"User id not found\");\n      }\n\n      await this.accountService.editSavingAccount(\n        userId,\n        accountId,\n        name,\n        description,\n        currency,\n        accountType,\n        targetAmount,\n        targetDate\n      );\n\n      return c.json({ message: \"Account edited successfully\" });\n    } catch (error) {\n      console.error(\"Edit account error:\", error);\n      throw error;\n    }\n  }\n}\n"]}