{"version":3,"file":"paymentController.js","sourceRoot":"","sources":["../../../src/controllers/paymentController.ts"],"names":[],"mappings":";;;AAEA,+DAA6D;AAE7D,MAAa,kBAAkB;IACrB,eAAe,CAAkB;IAEzC;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,gCAAe,EAAE,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,CAAU,EACV,MAAc,EACd,IAAY,EACZ,MAAc,EACd,WAAmB,EACnB,SAAiB,EACjB,SAAe,EACf,SAAoB,EACpB,iBAA0B,EAC1B,eAAuB,EACvB,gBAAyB,EACzB,IAAiB,EACjB,QAAsB,EACtB,YAAuB,EACvB,SAAkB;QAElB,IAAI,CAAC;YACH,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACvE,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,2BAA2B,EAAE,EAAE,GAAG,CAAC,CAAC;YAC7D,CAAC;YAED,IAAI,MAAM,IAAI,CAAC,EAAE,CAAC;gBAChB,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,kCAAkC,EAAE,EAAE,GAAG,CAAC,CAAC;YACpE,CAAC;YAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,aAAa,CACzD,MAAM,EACN,IAAI,EACJ,MAAM,EACN,WAAW,EACX,SAAS,EACT,SAAS,EACT,SAAS,EACT,iBAAiB,IAAI,KAAK,EAC1B,eAAe,IAAI,CAAC,EACpB,gBAAgB,IAAI,KAAK,EACzB,IAAI,EACJ,QAAQ,EACR,YAAY,IAAI,IAAI,EACpB,SAAS,CACV,CAAC;YAEF,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,0BAA0B,EAAE,EAAE,GAAG,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,CAAU,EAAE,MAAc;QAC7C,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mBAAmB,EAAE,EAAE,GAAG,CAAC,CAAC;YACrD,CAAC;YAED,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACtE,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACnD,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,4BAA4B,EAAE,EAAE,GAAG,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,CAAU,EAAE,MAAc,EAAE,SAAiB;QAC/D,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;gBAC1B,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,6BAA6B,EAAE,EAAE,GAAG,CAAC,CAAC;YAC/D,CAAC;YAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,aAAa,CAC7D,MAAM,EACN,SAAS,CACV,CAAC;YAEF,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,0BAA0B,EAAE,EAAE,GAAG,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;CACF;AAxFD,gDAwFC","sourcesContent":["import { Context } from \"hono\";\nimport { CurrencyType, Frequency, PaymentType } from \"@prisma/client\";\nimport { PaymentsService } from \"../services/paymentService\";\n\nexport class PaymentsController {\n  private paymentsService: PaymentsService;\n\n  constructor() {\n    this.paymentsService = new PaymentsService();\n  }\n\n  async createPayment(\n    c: Context,\n    userId: number,\n    name: string,\n    amount: number,\n    description: string,\n    accountId: number,\n    startDate: Date,\n    frequency: Frequency,\n    emailNotification: boolean,\n    notificationDay: number,\n    automaticPayment: boolean,\n    type: PaymentType,\n    currency: CurrencyType,\n    categoriesId?: number[],\n    paymentId?: number\n  ) {\n    try {\n      if (!name || !amount || !accountId || !frequency || !type || !currency) {\n        return c.json({ error: \"Fill all necessary fields\" }, 400);\n      }\n\n      if (amount <= 0) {\n        return c.json({ error: \"Amount must be greater than zero\" }, 400);\n      }\n\n      const newPayment = await this.paymentsService.createPayment(\n        userId,\n        name,\n        amount,\n        description,\n        accountId,\n        startDate,\n        frequency,\n        emailNotification || false,\n        notificationDay || 0,\n        automaticPayment || false,\n        type,\n        currency,\n        categoriesId || null,\n        paymentId\n      );\n\n      return c.json(newPayment);\n    } catch (error) {\n      console.error(\"Create payment error:\", error);\n      return c.json({ error: \"Failed to create payment\" }, 500);\n    }\n  }\n\n  async getAllPayments(c: Context, userId: number) {\n    try {\n      if (!userId) {\n        return c.json({ error: \"User id not found\" }, 400);\n      }\n\n      const allPayments = await this.paymentsService.getAllPayments(userId);\n      return c.json(allPayments);\n    } catch (error) {\n      console.error(\"Controller.getAllPayments:\", error);\n      return c.json({ error: \"Failed to get all payments\" }, 500);\n    }\n  }\n\n  async deletePayment(c: Context, userId: number, paymentId: number) {\n    try {\n      if (!userId || !paymentId) {\n        return c.json({ error: \"Missing userId or paymentId\" }, 400);\n      }\n\n      const deletedPayment = await this.paymentsService.deletePayment(\n        userId,\n        paymentId\n      );\n\n      return c.json({ success: true, data: deletedPayment });\n    } catch (error) {\n      console.error(\"Delete payment error:\", error);\n      return c.json({ error: \"Failed to delete payment\" }, 500);\n    }\n  }\n}\n"]}