{"version":3,"file":"authController.js","sourceRoot":"","sources":["../../../src/controllers/authController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context } from \"hono\";\nimport { AuthService } from \"../services/authService\";\n\nclass AuthError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"AuthError\";\n  }\n}\n\nexport class AuthController {\n  private authService: AuthService;\n\n  constructor() {\n    this.authService = new AuthService();\n  }\n\n  async login(c: Context) {\n    try {\n      const credentials = await c.req.json();\n\n      const ipAddress =\n        c.req.header(\"x-forwarded-for\") ||\n        c.req.header(\"x-real-ip\") ||\n        c.req.header(\"cf-connecting-ip\") ||\n        \"unknown\";\n      const userAgent = c.req.header(\"user-agent\") || \"unknown\";\n\n      const result = await this.authService.login(\n        credentials,\n        ipAddress,\n        userAgent\n      );\n      return c.json(result);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      if (error instanceof AuthError || error instanceof Error) {\n        return c.json({ error: error.message }, 401);\n      }\n      return c.json({ error: \"Internal server error\" }, 500);\n    }\n  }\n\n  async register(c: Context) {\n    try {\n      const data = await c.req.json();\n      const result = await this.authService.register(data);\n      return c.json(\n        {\n          message: \"Registration successful\",\n          ...result,\n        },\n        201\n      );\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      if (error instanceof AuthError || error instanceof Error) {\n        return c.json({ error: error.message }, 400);\n      }\n      return c.json({ error: \"Internal server error\" }, 500);\n    }\n  }\n\n  async refresh(c: Context) {\n    try {\n      const { token } = await c.req.json();\n\n      if (!token) {\n        return c.json({ error: \"Token is required\" }, 400);\n      }\n\n      const result = await this.authService.refreshToken(token);\n      return c.json(result);\n    } catch (error) {\n      console.error(\"Token refresh error:\", error);\n      if (error instanceof AuthError || error instanceof Error) {\n        return c.json({ error: error.message }, 401);\n      }\n      return c.json({ error: \"Internal server error\" }, 500);\n    }\n  }\n}\n"]}