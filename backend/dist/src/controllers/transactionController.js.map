{"version":3,"file":"transactionController.js","sourceRoot":"","sources":["../../../src/controllers/transactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context } from \"hono\";\nimport { TransactionService } from \"../services/transactionService\";\nimport { TransactionType } from \"@prisma/client\";\nimport { CurrencyType } from \"../types/models\";\n\nexport class TransactionController {\n  private transactionService: TransactionService;\n\n  constructor() {\n    this.transactionService = new TransactionService();\n  }\n\n  async getUserAllTransactions(c: Context, userId: number) {\n    try {\n      if (!userId) {\n        return c.json({ error: \"User id not found\" }, 400);\n      }\n\n      const allTransactions =\n        await this.transactionService.getUserAllTransactions(userId);\n      return c.json(allTransactions);\n    } catch (error) {\n      console.error(\"Controller.getUserAllTransactions:\", error);\n      throw error;\n    }\n  }\n\n  async addFundsDefaultAccount(\n    c: Context,\n    userId: number,\n    name: string,\n    description: string | null,\n    amount: number,\n    type: TransactionType,\n    toAccountId: number,\n    customCategoriesId: number[] | null,\n    currency: CurrencyType\n  ) {\n    try {\n      if (!userId || !name || !amount || !type || !toAccountId) {\n        return c.json({ error: \"Fill all necessary fields\" }, 400);\n      }\n\n      const newFundAccount =\n        await this.transactionService.addFundsDefaultAccount(\n          userId,\n          name,\n          description || \"\",\n          amount,\n          type,\n          toAccountId,\n          customCategoriesId,\n          currency\n        );\n\n      return c.json(newFundAccount);\n    } catch (error) {\n      console.error(\"Add funds to default account error:\", error);\n      return c.json({ error: \"Failed to add funds to default account\" }, 500);\n    }\n  }\n\n  async addFundsSaving(\n    c: Context,\n    userId: number,\n    amount: number,\n    fromAccountId: number,\n    toSavingId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    try {\n      if (!userId || !fromAccountId || !toSavingId) {\n        return c.json({ error: \"Fill all necessary fields\" }, 400);\n      }\n\n      if (amount <= 0) {\n        return c.json({ error: \"Amount must be greater than zero\" }, 400);\n      }\n\n      const savingTransaction = await this.transactionService.addFundsSaving(\n        userId,\n        amount,\n        fromAccountId,\n        toSavingId,\n        type || TransactionType.TRANSFER,\n        currency\n      );\n\n      return c.json(savingTransaction);\n    } catch (error) {\n      console.error(\"Add funds to saving account error:\", error);\n      return c.json({ error: \"Failed to add funds to saving account\" }, 500);\n    }\n  }\n\n  async addFundsDefault(\n    c: Context,\n    userId: number,\n    amount: number,\n    fromSavingId: number,\n    toAccountId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    try {\n      if (!userId || !fromSavingId || !toAccountId) {\n        return c.json({ error: \"Fill all necessary fields\" }, 400);\n      }\n\n      if (amount <= 0) {\n        return c.json({ error: \"Amount must be greater than zero\" }, 400);\n      }\n\n      const defaultTransaction = await this.transactionService.addFundsDefault(\n        userId,\n        amount,\n        fromSavingId,\n        toAccountId,\n        type || TransactionType.TRANSFER,\n        currency\n      );\n\n      return c.json(defaultTransaction);\n    } catch (error) {\n      console.error(\"Add funds to default account error:\", error);\n      return c.json({ error: \"Failed to add funds to default account\" }, 500);\n    }\n  }\n\n  async createExpense(\n    c: Context,\n    userId: number,\n    name: string | null,\n    amount: number,\n    currency: CurrencyType,\n    fromAccountId: number,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    try {\n      if (!userId || !amount || !fromAccountId) {\n        return c.json({ error: \"Fill all necessary fields\" }, 400);\n      }\n\n      const expense = await this.transactionService.createExpense(\n        amount,\n        currency,\n        userId,\n        name || \"\",\n        fromAccountId,\n        description,\n        customCategoriesId\n      );\n\n      return c.json(expense);\n    } catch (error) {\n      console.error(\"Create expense error:\", error);\n      return c.json({ error: \"Failed to create expense\" }, 500);\n    }\n  }\n\n  async transferFundsDefault(\n    c: Context,\n    userId: number,\n    amount: number,\n    fromAccountId: number,\n    toAccountId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    try {\n      if (!userId || !fromAccountId || !toAccountId) {\n        return c.json({ error: \"Fill all necessary fields\" }, 400);\n      }\n\n      if (amount <= 0) {\n        return c.json({ error: \"Amount must be greater than zero\" }, 400);\n      }\n\n      const defaultTransaction =\n        await this.transactionService.transferFundsDefault(\n          userId,\n          amount,\n          fromAccountId,\n          toAccountId,\n          type || TransactionType.TRANSFER,\n          currency\n        );\n\n      return c.json(defaultTransaction);\n    } catch (error) {\n      console.error(\"Transfer funds to default account error:\", error);\n      return c.json(\n        { error: \"Failed to transfer funds to default account\" },\n        500\n      );\n    }\n  }\n\n  async executeRecurringPayment(\n    c: Context,\n    userId: number,\n    paymentId: number,\n    amount: number,\n    currency: CurrencyType,\n    fromAccountId: number,\n    name: string,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    try {\n      if (!userId || !paymentId || !amount || !fromAccountId || !name) {\n        return c.json({ error: \"Fill all necessary fields\" }, 400);\n      }\n\n      const transaction = await this.transactionService.executeRecurringPayment(\n        userId,\n        paymentId,\n        amount,\n        currency,\n        fromAccountId,\n        name,\n        description,\n        customCategoriesId\n      );\n\n      return c.json(transaction);\n    } catch (error) {\n      console.error(\"Execute recurring payment error:\", error);\n      return c.json({ error: \"Failed to execute recurring payment\" }, 500);\n    }\n  }\n\n  async executeRecurringIncome(\n    c: Context,\n    userId: number,\n    paymentId: number,\n    amount: number,\n    currency: CurrencyType,\n    toAccountId: number,\n    name: string,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    try {\n      if (!userId || !paymentId || !amount || !toAccountId || !name) {\n        return c.json({ error: \"Fill all necessary fields\" }, 400);\n      }\n\n      const transaction = await this.transactionService.executeRecurringIncome(\n        userId,\n        paymentId,\n        amount,\n        currency,\n        toAccountId,\n        name,\n        description,\n        customCategoriesId\n      );\n\n      return c.json(transaction);\n    } catch (error) {\n      console.error(\"Execute recurring income error:\", error);\n      return c.json({ error: \"Failed to execute recurring income\" }, 500);\n    }\n  }\n}\n"]}