{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../src/middleware/auth.ts"],"names":[],"mappings":";;;AACA,+BAAiC;AACjC,yBAAuB;AAEvB,MAAM,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,iBAAiB,CAAC,CAAC;AAE9E,MAAM,WAAW,GAAG,KAAK,EAAE,CAAU,EAAE,IAAU,EAAE,EAAE;IAC1D,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAEjD,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACrD,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,kCAAkC,EAAE,EAAE,GAAG,CAAC,CAAC;QACpE,CAAC;QAED,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAEtC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;YAC5B,OAAO,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC3C,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,4BAA4B,EAAE,EAAE,GAAG,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAA,gBAAS,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAEnD,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAgB,CAAC,CAAC;QAC1C,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAEvB,MAAM,IAAI,EAAE,CAAC;IACf,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACnD,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,8BAA8B,EAAE,EAAE,GAAG,CAAC,CAAC;IAChE,CAAC;AACH,CAAC,CAAC;AAzBW,QAAA,WAAW,eAyBtB","sourcesContent":["import { Context, Next } from \"hono\";\nimport { jwtVerify } from \"jose\";\nimport \"dotenv/config\";\n\nconst secret = new TextEncoder().encode(process.env.JWT_SECRET || \"your-secret-key\");\n\nexport const verifyToken = async (c: Context, next: Next) => {\n  try {\n    const authHeader = c.req.header(\"Authorization\");\n\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n      return c.json({ error: \"Unauthorized - No token provided\" }, 401);\n    }\n\n    const token = authHeader.substring(7);\n\n    if (!process.env.JWT_SECRET) {\n      console.error(\"JWT_SECRET not configured\");\n      return c.json({ error: \"Server configuration error\" }, 500);\n    }\n\n    const { payload } = await jwtVerify(token, secret);\n\n    c.set(\"userId\", payload.userId as number);\n    c.set(\"user\", payload);\n\n    await next();\n  } catch (error) {\n    console.error(\"Token verification failed:\", error);\n    return c.json({ error: \"Unauthorized - Invalid token\" }, 401);\n  }\n};\n"]}