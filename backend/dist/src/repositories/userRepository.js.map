{"version":3,"file":"userRepository.js","sourceRoot":"","sources":["../../../src/repositories/userRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport { User, RegisterData } from \"../types/user\";\n\nexport interface EditUserData {\n  firstName?: string;\n  lastName?: string;\n  username?: string;\n  email?: string;\n  password?: string;\n}\n\nexport class UserRepository {\n  private prisma: PrismaClient;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n  }\n\n  async findByUsername(username: string) {\n    return await this.prisma.user.findUnique({\n      where: { username },\n    });\n  }\n\n  async findByUsernameOrEmail(username: string, email: string) {\n    return await this.prisma.user.findFirst({\n      where: {\n        OR: [{ username }, { email }],\n      },\n    });\n  }\n\n  async findById(id: number) {\n    return await this.prisma.user.findUnique({\n      where: { id },\n    });\n  }\n\n  async create(data: RegisterData) {\n    return await this.prisma.$transaction(async (prisma) => {\n      const user = await prisma.user.create({\n        data: {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          username: data.username,\n          email: data.email,\n          password: data.password,\n        },\n      });\n      return user;\n    });\n  }\n\n  async editUser(userId: number, data: EditUserData) {\n    return await this.prisma.$transaction(async (prisma) => {\n      const existingUser = await prisma.user.findUnique({\n        where: { id: userId },\n      });\n\n      if (!existingUser) {\n        throw new Error(\"User not found\");\n      }\n\n      if (data.username || data.email) {\n        const conflictUser = await prisma.user.findFirst({\n          where: {\n            AND: [\n              { id: { not: userId } },\n              {\n                OR: [\n                  ...(data.username ? [{ username: data.username }] : []),\n                  ...(data.email ? [{ email: data.email }] : []),\n                ],\n              },\n            ],\n          },\n        });\n\n        if (conflictUser) {\n          if (conflictUser.username === data.username) {\n            throw new Error(\"Username already exists\");\n          }\n          if (conflictUser.email === data.email) {\n            throw new Error(\"Email already exists\");\n          }\n        }\n      }\n\n      const updateData = {\n        firstName: data.firstName ?? existingUser.firstName,\n        lastName: data.lastName ?? existingUser.lastName,\n        username: data.username ?? existingUser.username,\n        email: data.email ?? existingUser.email,\n        ...(data.password && { password: data.password }),\n        updatedAt: new Date(),\n      };\n\n      const updatedUser = await prisma.user.update({\n        where: { id: userId },\n        data: updateData,\n        select: {\n          id: true,\n          firstName: true,\n          lastName: true,\n          username: true,\n          email: true,\n          createdAt: true,\n          updatedAt: true,\n        },\n      });\n\n      return updatedUser;\n    });\n  }\n\n  async changePassword(userId: number, newPassword: string) {\n    return await this.prisma.$transaction(async (prisma) => {\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new Error(\"User not found\");\n      }\n\n      await prisma.user.update({\n        where: { id: userId },\n        data: {\n          password: newPassword,\n          updatedAt: new Date(),\n        },\n      });\n\n      return { success: true, message: \"Password updated successfully\" };\n    });\n  }\n\n  async checkAvailabilityForEdit(\n    userId: number,\n    username?: string,\n    email?: string\n  ) {\n    const conflictUser = await this.prisma.user.findFirst({\n      where: {\n        AND: [\n          { id: { not: userId } },\n          {\n            OR: [\n              ...(username ? [{ username }] : []),\n              ...(email ? [{ email }] : []),\n            ],\n          },\n        ],\n      },\n    });\n\n    return {\n      usernameAvailable:\n        !username || !conflictUser || conflictUser.username !== username,\n      emailAvailable: !email || !conflictUser || conflictUser.email !== email,\n    };\n  }\n}\n"]}