{"version":3,"file":"budgetRepository.js","sourceRoot":"","sources":["../../../src/repositories/budgetRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { PrismaClient, CurrencyType } from \"@prisma/client\";\nimport { TransactionRepository } from \"./transactionRepository\";\n\nexport class BudgetRepository {\n  private prisma: PrismaClient;\n  private transactionRepo: TransactionRepository;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n    this.transactionRepo = new TransactionRepository();\n  }\n\n  async getAllBudgets(userId: number) {\n    const allBudgets = await this.prisma.budget.findMany({\n      where: {\n        userId: userId,\n        deletedAt: null,\n      },\n      include: {\n        budgetCategories: {\n          where: {\n            deletedAt: null,\n          },\n          select: {\n            customCategory: {\n              select: {\n                id: true,\n                name: true,\n                type: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    const currentMonth = new Date().getMonth();\n    const currentYear = new Date().getFullYear();\n    const rates = await this.transactionRepo.getExchangeRates();\n\n    const updatedBudgets = [];\n\n    for (const budget of allBudgets) {\n      try {\n        const budgetCategoryIds = budget.budgetCategories.map(\n          (bc) => bc.customCategory.id\n        );\n\n        let totalSpent = 0;\n\n        if (budgetCategoryIds.length > 0) {\n          const transactions = await this.prisma.transaction.findMany({\n            where: {\n              userId: userId,\n              type: \"EXPENSE\",\n              deletedAt: null,\n              date: {\n                gte: new Date(currentYear, currentMonth, 1),\n                lt: new Date(currentYear, currentMonth + 1, 1),\n              },\n              transactionCategories: {\n                some: {\n                  customCategoryId: {\n                    in: budgetCategoryIds,\n                  },\n                  deletedAt: null,\n                },\n              },\n            },\n            select: {\n              amount: true,\n              currency: true,\n            },\n          });\n\n          for (const transaction of transactions) {\n            let transactionAmount = Math.abs(transaction.amount);\n\n            if (transaction.currency !== budget.currency) {\n              if (rates[transaction.currency] && rates[budget.currency]) {\n                transactionAmount =\n                  transactionAmount *\n                  (rates[transaction.currency] / rates[budget.currency]);\n              }\n            }\n\n            totalSpent += transactionAmount;\n          }\n        }\n\n        const updatedBudget = await this.prisma.budget.update({\n          where: { id: budget.id },\n          data: { currentSpent: totalSpent },\n          include: {\n            budgetCategories: {\n              where: {\n                deletedAt: null,\n              },\n              select: {\n                customCategory: {\n                  select: {\n                    id: true,\n                    name: true,\n                    type: true,\n                  },\n                },\n              },\n            },\n          },\n        });\n\n        updatedBudgets.push({\n          ...updatedBudget,\n          customCategories: updatedBudget.budgetCategories.map((bc) => bc.customCategory),\n        });\n\n      } catch (error) {\n        console.error(`Error calculating spent for budget ${budget.id}:`, error);\n        updatedBudgets.push({\n          ...budget,\n          customCategories: budget.budgetCategories.map((bc) => bc.customCategory),\n        });\n      }\n    }\n\n    return updatedBudgets;\n  }\n\n  async createUserBudgetWithCategories(\n    userId: number,\n    name: string,\n    limitAmount: number,\n    currency: CurrencyType,\n    categoryIds: number[]\n  ) {\n    const budget = await this.prisma.budget.create({\n      data: {\n        name,\n        limitAmount,\n        currentSpent: 0,\n        userId,\n        currency,\n      },\n    });\n\n    if (categoryIds && categoryIds.length > 0) {\n      await this.prisma.budgetCategory.createMany({\n        data: categoryIds.map((categoryId) => ({\n          budgetId: budget.id,\n          customCategoryId: categoryId,\n        })),\n      });\n    }\n\n    const currentMonth = new Date().getMonth();\n    const currentYear = new Date().getFullYear();\n    const rates = await this.transactionRepo.getExchangeRates();\n\n    try {\n      if (categoryIds && categoryIds.length > 0) {\n        const transactions = await this.prisma.transaction.findMany({\n          where: {\n            userId: userId,\n            type: \"EXPENSE\",\n            deletedAt: null,\n            date: {\n              gte: new Date(currentYear, currentMonth, 1),\n              lt: new Date(currentYear, currentMonth + 1, 1),\n            },\n            transactionCategories: {\n              some: {\n                customCategoryId: {\n                  in: categoryIds,\n                },\n                deletedAt: null,\n              },\n            },\n          },\n          select: {\n            amount: true,\n            currency: true,\n          },\n        });\n\n        let totalSpent = 0;\n        for (const transaction of transactions) {\n          let transactionAmount = Math.abs(transaction.amount);\n\n          if (transaction.currency !== currency) {\n            if (rates[transaction.currency] && rates[currency]) {\n              transactionAmount =\n                transactionAmount *\n                (rates[transaction.currency] / rates[currency]);\n            }\n          }\n\n          totalSpent += transactionAmount;\n        }\n\n        await this.prisma.budget.update({\n          where: { id: budget.id },\n          data: { currentSpent: totalSpent },\n        });\n      }\n    } catch (error) {\n      console.error(`Error calculating initial spent for budget ${budget.id}:`, error);\n    }\n\n    return await this.prisma.budget.findUnique({\n      where: { id: budget.id },\n      include: {\n        budgetCategories: {\n          where: {\n            deletedAt: null,\n          },\n          select: {\n            customCategory: {\n              select: {\n                id: true,\n                name: true,\n                type: true,\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  async deleteUserBudget(userId: number, budgetId: number) {\n    return await this.prisma.budget.update({\n      where: {\n        id: budgetId,\n        userId: userId,\n      },\n      data: {\n        deletedAt: new Date(),\n      },\n    });\n  }\n\n  async updateUserBudget(\n    userId: number,\n    budgetId: number,\n    name: string,\n    limitAmount: number,\n    currency: CurrencyType,\n    categoryIds: number[]\n  ) {\n    const existingBudget = await this.prisma.budget.findFirst({\n      where: {\n        id: budgetId,\n        userId: userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!existingBudget) {\n      throw new Error(\"Budget not found or doesn't belong to the user\");\n    }\n\n    let updatedCurrentSpent = existingBudget.currentSpent;\n\n    if (existingBudget.currency !== currency) {\n      const rates = await this.transactionRepo.getExchangeRates();\n\n      if (!rates[existingBudget.currency] || !rates[currency]) {\n        throw new Error(\n          `Exchange rate not found for conversion between ${existingBudget.currency} and ${currency}`\n        );\n      }\n\n      updatedCurrentSpent =\n        existingBudget.currentSpent *\n        (rates[existingBudget.currency] / rates[currency]);\n    }\n\n    const updatedBudget = await this.prisma.budget.update({\n      where: {\n        id: budgetId,\n        userId: userId,\n      },\n      data: {\n        name,\n        limitAmount,\n        currency,\n        currentSpent: updatedCurrentSpent,\n      },\n    });\n\n    await this.prisma.budgetCategory.deleteMany({\n      where: { budgetId },\n    });\n\n    if (categoryIds && categoryIds.length > 0) {\n      await this.prisma.budgetCategory.createMany({\n        data: categoryIds.map((categoryId) => ({\n          budgetId: updatedBudget.id,\n          customCategoryId: categoryId,\n        })),\n      });\n    }\n\n    const currentMonth = new Date().getMonth();\n    const currentYear = new Date().getFullYear();\n    const rates = await this.transactionRepo.getExchangeRates();\n\n    try {\n      if (categoryIds && categoryIds.length > 0) {\n        const transactions = await this.prisma.transaction.findMany({\n          where: {\n            userId: userId,\n            type: \"EXPENSE\",\n            deletedAt: null,\n            date: {\n              gte: new Date(currentYear, currentMonth, 1),\n              lt: new Date(currentYear, currentMonth + 1, 1),\n            },\n            transactionCategories: {\n              some: {\n                customCategoryId: {\n                  in: categoryIds,\n                },\n                deletedAt: null,\n              },\n            },\n          },\n          select: {\n            amount: true,\n            currency: true,\n          },\n        });\n\n        let totalSpent = 0;\n        for (const transaction of transactions) {\n          let transactionAmount = Math.abs(transaction.amount);\n\n          if (transaction.currency !== currency) {\n            if (rates[transaction.currency] && rates[currency]) {\n              transactionAmount =\n                transactionAmount *\n                (rates[transaction.currency] / rates[currency]);\n            }\n          }\n\n          totalSpent += transactionAmount;\n        }\n\n        await this.prisma.budget.update({\n          where: { id: updatedBudget.id },\n          data: { currentSpent: totalSpent },\n        });\n      } else {\n        await this.prisma.budget.update({\n          where: { id: updatedBudget.id },\n          data: { currentSpent: 0 },\n        });\n      }\n    } catch (error) {\n      console.error(`Error recalculating spent for budget ${budgetId}:`, error);\n    }\n\n    return await this.prisma.budget.findUnique({\n      where: { id: updatedBudget.id },\n      include: {\n        budgetCategories: {\n          where: {\n            deletedAt: null,\n          },\n          select: {\n            customCategory: {\n              select: {\n                id: true,\n                name: true,\n                type: true,\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n}"]}