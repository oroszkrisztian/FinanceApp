{"version":3,"file":"categoriesRepository.js","sourceRoot":"","sources":["../../../src/repositories/categoriesRepository.ts"],"names":[],"mappings":";;;AAAA,2CAA8C;AAG9C,MAAa,oBAAoB;IACvB,MAAM,CAAe;IAE7B;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC;YAC/C,KAAK,EAAE;gBACL,IAAI,EAAE,QAAQ;aACf;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,MAAc,EAAE,YAAoB;QAC3D,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC;YAC7C,IAAI,EAAE;gBACJ,MAAM;gBACN,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,MAAM;aACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,MAAc;QACpC,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC;YAC/C,KAAK,EAAE;gBACL,MAAM;gBACN,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,MAAc;QAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC;YACvD,KAAK,EAAE;gBACL,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gBAClD,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QACnB,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,kBAAkB,CACtB,UAAkB,EAClB,MAAc,EACd,OAAe;QAEf,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC;YAC7C,KAAK,EAAE;gBACL,EAAE,EAAE,UAAU;gBACd,MAAM;gBACN,IAAI,EAAE,MAAM;aACb;YACD,IAAI,EAAE;gBACJ,IAAI,EAAE,OAAO;aACd;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,UAAkB,EAAE,MAAc;QAC7D,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC;YAC7C,KAAK,EAAE;gBACL,EAAE,EAAE,UAAU;gBACd,MAAM;gBACN,IAAI,EAAE,MAAM;aACb;YACD,IAAI,EAAE;gBACJ,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC,CAAC;IACL,CAAC;CACF;AA3ED,oDA2EC","sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport { all } from \"axios\";\n\nexport class CategoriesRepository {\n  private prisma: PrismaClient;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n  }\n\n  async getAllSystemCategories() {\n    return await this.prisma.customCategory.findMany({\n      where: {\n        type: \"SYSTEM\",\n      },\n    });\n  }\n\n  async createUserCategory(userId: number, categoryName: string) {\n    return await this.prisma.customCategory.create({\n      data: {\n        userId,\n        name: categoryName,\n        type: \"USER\",\n      },\n    });\n  }\n\n  async getUserCategories(userId: number) {\n    return await this.prisma.customCategory.findMany({\n      where: {\n        userId,\n        type: \"USER\",\n        deletedAt: null,\n      },\n    });\n  }\n\n  async getAllCategoriesForUser(userId: number) {\n    const allcat = await this.prisma.customCategory.findMany({\n      where: {\n        OR: [{ type: \"SYSTEM\" }, { userId, type: \"USER\" }],\n        deletedAt: null,\n      },\n    });\n    console.log(allcat)\n    return allcat;\n  }\n\n  async updateUserCategory(\n    categoryId: number,\n    userId: number,\n    newName: string\n  ) {\n    return await this.prisma.customCategory.update({\n      where: {\n        id: categoryId,\n        userId,\n        type: \"USER\",\n      },\n      data: {\n        name: newName,\n      },\n    });\n  }\n\n  async softDeleteUserCategory(categoryId: number, userId: number) {\n    return await this.prisma.customCategory.update({\n      where: {\n        id: categoryId,\n        userId,\n        type: \"USER\",\n      },\n      data: {\n        deletedAt: new Date(),\n      },\n    });\n  }\n}\n"]}