{"version":3,"file":"transactionRepository.js","sourceRoot":"","sources":["../../../src/repositories/transactionRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CurrencyType,\n  PrismaClient,\n  TransactionType,\n  BalanceChangeType,\n} from \"@prisma/client\";\nimport axios from \"axios\";\nimport { parseStringPromise } from \"xml2js\";\n\nexport class TransactionRepository {\n  private prisma: PrismaClient;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n  }\n\n  private async recordBalanceChange(\n    prisma: any,\n    accountId: number,\n    transactionId: number | null,\n    previousBalance: number,\n    newBalance: number,\n    changeType: BalanceChangeType,\n    currency: CurrencyType,\n    description?: string\n  ) {\n    const amountChanged = newBalance - previousBalance;\n\n    await prisma.accountBalanceHistory.create({\n      data: {\n        accountId,\n        transactionId,\n        previousBalance,\n        newBalance,\n        amountChanged,\n        changeType,\n        currency,\n        description,\n      },\n    });\n\n    console.log(\n      `Balance change recorded for account ${accountId}: ${previousBalance} -> ${newBalance} (${amountChanged >= 0 ? \"+\" : \"\"}${amountChanged})`\n    );\n  }\n\n  private async updateAccountBalance(\n    prisma: any,\n    accountId: number,\n    amount: number,\n    isIncrement: boolean,\n    transactionId: number | null,\n    changeType: BalanceChangeType,\n    description?: string\n  ) {\n    const account = await prisma.account.findUnique({\n      where: { id: accountId },\n      select: { amount: true, currency: true },\n    });\n\n    if (!account) {\n      throw new Error(`Account with id ${accountId} not found`);\n    }\n\n    const previousBalance = account.amount;\n    const newBalance = isIncrement\n      ? previousBalance + amount\n      : previousBalance - amount;\n\n    await prisma.account.update({\n      where: { id: accountId },\n      data: {\n        amount: isIncrement ? { increment: amount } : { decrement: amount },\n      },\n    });\n\n    await this.recordBalanceChange(\n      prisma,\n      accountId,\n      transactionId,\n      previousBalance,\n      newBalance,\n      changeType,\n      account.currency,\n      description\n    );\n\n    return { previousBalance, newBalance };\n  }\n\n  async getUserAllTransactions(userId: number) {\n    const allTransactions = await this.prisma.transaction.findMany({\n      where: {\n        userId: userId,\n      },\n      include: {\n        transactionCategories: {\n          select: {\n            customCategoryId: true,\n            customCategory: {\n              select: {\n                id: true,\n                name: true,\n                type: true,\n              },\n            },\n          },\n        },\n        fromAccount: {\n          select: {\n            id: true,\n            name: true,\n            currency: true,\n          },\n        },\n        toAccount: {\n          select: {\n            id: true,\n            name: true,\n            currency: true,\n          },\n        },\n        \n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n\n    return allTransactions;\n  }\n\n  async getAccountBalanceHistory(\n    accountId: number,\n    userId: number,\n    limit?: number\n  ) {\n    const account = await this.prisma.account.findFirst({\n      where: {\n        id: accountId,\n        userId: userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    return await this.prisma.accountBalanceHistory.findMany({\n      where: {\n        accountId: accountId,\n      },\n      include: {\n        transaction: {\n          select: {\n            id: true,\n            name: true,\n            type: true,\n            amount: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      take: limit,\n    });\n  }\n\n  async getExchangeRates() {\n    try {\n      const rates: { [key: string]: number } = {};\n\n      rates[\"RON\"] = 1;\n\n      const response = await axios.get(\"https://financeapp-bg0k.onrender.com/exchange-rates\");\n      const xmlText = response.data;\n\n      const result = await parseStringPromise(xmlText, {\n        explicitArray: false,\n        mergeAttrs: false,\n      });\n\n      if (\n        result &&\n        result.DataSet &&\n        result.DataSet.Body &&\n        result.DataSet.Body.Cube &&\n        result.DataSet.Body.Cube.Rate\n      ) {\n        const rateElements = Array.isArray(result.DataSet.Body.Cube.Rate)\n          ? result.DataSet.Body.Cube.Rate\n          : [result.DataSet.Body.Cube.Rate];\n\n        for (const rate of rateElements) {\n          if (rate && rate.$ && rate.$.currency) {\n            const currency = rate.$.currency;\n            const multiplier = rate.$.multiplier\n              ? parseInt(rate.$.multiplier)\n              : 1;\n            const value = parseFloat(rate._);\n\n            if (currency && !isNaN(value)) {\n              if (multiplier > 1) {\n                rates[currency] = value / multiplier;\n              } else {\n                rates[currency] = value;\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"Exchange rates fetched:\", rates);\n      return rates;\n    } catch (error) {\n      console.error(\"Error fetching exchange rates:\", error);\n      throw new Error(\"Failed to fetch exchange rates\");\n    }\n  }\n\n  async addFundsDefaultAccount(\n    userId: number,\n    name: string | null,\n    description: string,\n    amount: number,\n    type: TransactionType,\n    toAccountId: number,\n    customCategoriesId: number[] | null,\n    currency: CurrencyType\n  ) {\n    console.log(\"Sent account id \", toAccountId);\n    const defaultAccount = await this.prisma.account.findFirst({\n      where: {\n        id: toAccountId,\n        userId: userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!defaultAccount) {\n      throw new Error(\"No default account found for the user\");\n    }\n\n    console.log(\n      \"Adding funds to default account:\",\n      toAccountId,\n      \"amount:\",\n      amount,\n      \"currency:\",\n      currency\n    );\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId: userId,\n          name: name,\n          description: description,\n          amount: amount,\n          type: type,\n          toAccountId: defaultAccount.id,\n          currency: currency,\n        },\n        include: {\n          toAccount: true,\n          budget: true,\n        },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        defaultAccount.id,\n        amount,\n        true,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_INCOME,\n        `Income: ${name || \"Funds added\"}`\n      );\n\n      if (customCategoriesId && customCategoriesId.length > 0) {\n        const validCategories = await prisma.customCategory.findMany({\n          where: {\n            id: { in: customCategoriesId },\n            OR: [{ userId: userId }, { type: \"SYSTEM\" }],\n            deletedAt: null,\n          },\n        });\n\n        if (validCategories.length !== customCategoriesId.length) {\n          throw new Error(\n            \"One or more categories are invalid or don't belong to the user\"\n          );\n        }\n\n        await prisma.transactionCategory.createMany({\n          data: customCategoriesId.map((categoryId) => ({\n            transactionId: transaction.id,\n            customCategoryId: categoryId,\n          })),\n        });\n      }\n\n      return transaction;\n    });\n  }\n\n  async addFundsSaving(\n    userId: number,\n    amount: number,\n    fromAccountId: number,\n    toSavingId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    const fromAccount = await this.prisma.account.findFirst({\n      where: {\n        id: fromAccountId,\n        userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!fromAccount) {\n      throw new Error(\"Source account not found or doesn't belong to the user\");\n    }\n\n    const toAccount = await this.prisma.account.findFirst({\n      where: {\n        id: toSavingId,\n        userId,\n        type: \"SAVINGS\",\n        deletedAt: null,\n      },\n      include: {\n        savingAccount: true,\n      },\n    });\n\n    if (!toAccount) {\n      throw new Error(\n        \"Savings account not found or doesn't belong to the user\"\n      );\n    }\n\n    let amountToWithdraw = amount;\n\n    if (fromAccount.currency !== currency) {\n      const rates = await this.getExchangeRates();\n\n      if (!rates[fromAccount.currency]) {\n        throw new Error(`Exchange rate for ${fromAccount.currency} not found`);\n      }\n\n      if (!rates[currency]) {\n        throw new Error(`Exchange rate for ${currency} not found`);\n      }\n\n      amountToWithdraw =\n        amount * (rates[currency] / rates[fromAccount.currency]);\n\n      console.log(\n        `Converting ${amount} ${currency} to ${amountToWithdraw.toFixed(2)} ${fromAccount.currency}`\n      );\n    }\n\n    if (fromAccount.amount < amountToWithdraw) {\n      throw new Error(\n        `Insufficient funds in source account. Available: ${fromAccount.amount} ${fromAccount.currency}, Required: ${amountToWithdraw.toFixed(2)} ${fromAccount.currency}`\n      );\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId,\n          amount,\n          type,\n          fromAccountId: fromAccountId,\n          toAccountId: toSavingId,\n          currency,\n        },\n        include: {\n          fromAccount: true,\n          toAccount: true,\n          budget: true,\n        },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        fromAccountId,\n        amountToWithdraw,\n        false,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_TRANSFER_OUT,\n        `Transfer to savings account`\n      );\n\n      await this.updateAccountBalance(\n        prisma,\n        toSavingId,\n        amount,\n        true,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_TRANSFER_IN,\n        `Transfer from main account`\n      );\n\n      if (toAccount.savingAccount && !toAccount.savingAccount.isCompleted) {\n        const updatedAmount = toAccount.amount + amount;\n\n        if (updatedAmount >= toAccount.savingAccount.targetAmount) {\n          await prisma.savingAccount.update({\n            where: {\n              id: toAccount.savingAccount.id,\n            },\n            data: {\n              isCompleted: true,\n            },\n          });\n        }\n      }\n\n      return transaction;\n    });\n  }\n\n  async addFundsDefault(\n    userId: number,\n    amount: number,\n    fromSavingId: number,\n    toAccountId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    const fromAccount = await this.prisma.account.findFirst({\n      where: {\n        id: fromSavingId,\n        userId,\n        type: \"SAVINGS\",\n        deletedAt: null,\n      },\n      include: {\n        savingAccount: true,\n      },\n    });\n\n    if (!fromAccount) {\n      throw new Error(\n        \"Source savings account not found or doesn't belong to the user\"\n      );\n    }\n\n    const toAccount = await this.prisma.account.findFirst({\n      where: {\n        id: toAccountId,\n        userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!toAccount) {\n      throw new Error(\n        \"Destination account not found or doesn't belong to the user\"\n      );\n    }\n\n    let amountToWithdraw = amount;\n\n    if (fromAccount.currency !== currency) {\n      const rates = await this.getExchangeRates();\n      if (!rates[fromAccount.currency]) {\n        throw new Error(`Exchange rate for ${fromAccount.currency} not found`);\n      }\n      if (!rates[currency]) {\n        throw new Error(`Exchange rate for ${currency} not found`);\n      }\n\n      amountToWithdraw =\n        amount * (rates[currency] / rates[fromAccount.currency]);\n      console.log(\n        `Converting ${amount} ${currency} to ${amountToWithdraw.toFixed(2)} ${fromAccount.currency} for withdrawal`\n      );\n    }\n\n    if (fromAccount.amount < amountToWithdraw) {\n      throw new Error(\n        `Insufficient funds in savings account. Available: ${fromAccount.amount} ${fromAccount.currency}, Required: ${amountToWithdraw.toFixed(2)} ${fromAccount.currency}`\n      );\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId,\n          amount,\n          type,\n          fromAccountId: fromSavingId,\n          toAccountId: toAccountId,\n          currency,\n        },\n        include: {\n          fromAccount: true,\n          toAccount: true,\n          budget: true,\n        },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        fromSavingId,\n        amountToWithdraw,\n        false,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_TRANSFER_OUT,\n        `Transfer from savings to main account`\n      );\n\n      console.log(\"Adding funds to default account:\", toAccountId);\n      console.log(\"amount:\", amount);\n      await this.updateAccountBalance(\n        prisma,\n        toAccountId,\n        amount,\n        true,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_TRANSFER_IN,\n        `Transfer from savings account`\n      );\n\n      return transaction;\n    });\n  }\n\n  async createExpense(\n    amount: number,\n    currency: CurrencyType,\n    userId: number,\n    name: string,\n    fromAccountId: number,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    const account = await this.prisma.account.findFirst({\n      where: {\n        id: fromAccountId,\n        userId: userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    let amountToWithdraw = amount;\n    const rates = await this.getExchangeRates();\n\n    if (account.currency !== currency) {\n      if (!rates[account.currency] || !rates[currency]) {\n        throw new Error(\n          `Exchange rate not found for conversion between ${currency} and ${account.currency}`\n        );\n      }\n      amountToWithdraw = amount * (rates[currency] / rates[account.currency]);\n    }\n\n    if (account.amount < amountToWithdraw) {\n      throw new Error(\n        `Insufficient funds in account. Available: ${account.amount} ${account.currency}, Required: ${amountToWithdraw.toFixed(2)} ${account.currency}`\n      );\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId: userId,\n          name: name,\n          fromAccountId: fromAccountId,\n          description: description,\n          type: TransactionType.EXPENSE,\n          amount: amount,\n          currency: currency,\n        },\n        include: {\n          fromAccount: true,\n        },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        fromAccountId,\n        amountToWithdraw,\n        false,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_EXPENSE,\n        `Expense: ${name}`\n      );\n\n      if (customCategoriesId && customCategoriesId.length > 0) {\n        const validCategories = await prisma.customCategory.findMany({\n          where: {\n            id: { in: customCategoriesId },\n            OR: [{ userId: userId }, { type: \"SYSTEM\" }],\n            deletedAt: null,\n          },\n        });\n\n        if (validCategories.length !== customCategoriesId.length) {\n          throw new Error(\n            \"One or more categories are invalid or don't belong to the user\"\n          );\n        }\n\n        await prisma.transactionCategory.createMany({\n          data: customCategoriesId.map((categoryId) => ({\n            transactionId: transaction.id,\n            customCategoryId: categoryId,\n          })),\n        });\n      }\n\n      if (customCategoriesId && customCategoriesId.length > 0) {\n        const budgets = await prisma.budget.findMany({\n          where: {\n            userId: userId,\n            deletedAt: null,\n            budgetCategories: {\n              some: {\n                customCategoryId: {\n                  in: customCategoriesId,\n                },\n              },\n            },\n          },\n        });\n\n        for (const budget of budgets) {\n          let budgetAmount = amount;\n          if (currency !== budget.currency && rates[budget.currency]) {\n            budgetAmount = amount * (rates[currency] / rates[budget.currency]);\n          }\n\n          await prisma.budget.update({\n            where: { id: budget.id },\n            data: {\n              currentSpent: { increment: budgetAmount },\n              transactions: { connect: { id: transaction.id } },\n            },\n          });\n        }\n      }\n\n      return transaction;\n    });\n  }\n\n  async transferFundsDefault(\n    userId: number,\n    amount: number,\n    fromAccountId: number,\n    toAccountId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    const fromAccount = await this.prisma.account.findFirst({\n      where: {\n        id: fromAccountId,\n        userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!fromAccount) {\n      throw new Error(\"Source account not found or doesn't belong to the user\");\n    }\n\n    const toAccount = await this.prisma.account.findFirst({\n      where: {\n        id: toAccountId,\n        userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!toAccount) {\n      throw new Error(\n        \"Destination account not found or doesn't belong to the user\"\n      );\n    }\n\n    if (fromAccount.amount < amount) {\n      throw new Error(\n        `Insufficient funds in source account. Available: ${fromAccount.amount} ${fromAccount.currency}, Required: ${amount} ${fromAccount.currency}`\n      );\n    }\n\n    let amountToDeposit = amount;\n\n    if (toAccount.currency !== currency) {\n      const rates = await this.getExchangeRates();\n      if (!rates[toAccount.currency]) {\n        throw new Error(`Exchange rate for ${toAccount.currency} not found`);\n      }\n      if (!rates[currency]) {\n        throw new Error(`Exchange rate for ${currency} not found`);\n      }\n\n      amountToDeposit = amount * (rates[currency] / rates[toAccount.currency]);\n      console.log(\n        `Converting ${amount} ${currency} to ${amountToDeposit.toFixed(2)} ${toAccount.currency} for deposit`\n      );\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId,\n          amount,\n          type,\n          fromAccountId: fromAccountId,\n          toAccountId: toAccountId,\n          currency,\n        },\n        include: {\n          fromAccount: true,\n          toAccount: true,\n          budget: true,\n        },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        fromAccountId,\n        amount,\n        false,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_TRANSFER_OUT,\n        `Transfer to account ${toAccount.name}`\n      );\n\n      await this.updateAccountBalance(\n        prisma,\n        toAccountId,\n        amountToDeposit,\n        true,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_TRANSFER_IN,\n        `Transfer from account ${fromAccount.name}`\n      );\n\n      return transaction;\n    });\n  }\n\n  async executeRecurringPayment(\n    userId: number,\n    paymentId: number,\n    amount: number,\n    currency: CurrencyType,\n    fromAccountId: number,\n    name: string,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    const account = await this.prisma.account.findFirst({\n      where: {\n        id: fromAccountId,\n        userId: userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    let amountToWithdraw = amount;\n    const rates = await this.getExchangeRates();\n\n    if (account.currency !== currency) {\n      if (!rates[account.currency] || !rates[currency]) {\n        throw new Error(\n          `Exchange rate not found for conversion between ${currency} and ${account.currency}`\n        );\n      }\n      amountToWithdraw = amount * (rates[currency] / rates[account.currency]);\n    }\n\n    if (account.amount < amountToWithdraw) {\n      throw new Error(\n        `Insufficient funds in account. Available: ${account.amount} ${account.currency}, Required: ${amountToWithdraw.toFixed(2)} ${account.currency}`\n      );\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId: userId,\n          name: name,\n          fromAccountId: fromAccountId,\n          description: description,\n          type: TransactionType.EXPENSE,\n          amount: amount,\n          currency: currency,\n        },\n        include: {\n          fromAccount: true,\n        },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        fromAccountId,\n        amountToWithdraw,\n        false,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_EXPENSE,\n        `Recurring payment: ${name}`\n      );\n\n      if (customCategoriesId && customCategoriesId.length > 0) {\n        const validCategories = await prisma.customCategory.findMany({\n          where: {\n            id: { in: customCategoriesId },\n            OR: [{ userId: userId }, { type: \"SYSTEM\" }],\n            deletedAt: null,\n          },\n        });\n\n        if (validCategories.length !== customCategoriesId.length) {\n          throw new Error(\n            \"One or more categories are invalid or don't belong to the user\"\n          );\n        }\n\n        await prisma.transactionCategory.createMany({\n          data: customCategoriesId.map((categoryId) => ({\n            transactionId: transaction.id,\n            customCategoryId: categoryId,\n          })),\n        });\n      }\n\n      if (customCategoriesId && customCategoriesId.length > 0) {\n        const budgets = await prisma.budget.findMany({\n          where: {\n            userId: userId,\n            deletedAt: null,\n            budgetCategories: {\n              some: {\n                customCategoryId: {\n                  in: customCategoriesId,\n                },\n              },\n            },\n          },\n          include: {\n            budgetCategories: {\n              include: {\n                customCategory: true,\n              },\n            },\n          },\n        });\n\n        for (const budget of budgets) {\n          let budgetAmount = amount;\n\n          if (currency !== budget.currency && rates[budget.currency]) {\n            budgetAmount = amount * (rates[currency] / rates[budget.currency]);\n          }\n\n          await prisma.budget.update({\n            where: { id: budget.id },\n            data: {\n              currentSpent: { increment: budgetAmount },\n              transactions: { connect: { id: transaction.id } },\n            },\n          });\n\n          console.log(\n            `Updated budget \"${budget.name}\" with ${budgetAmount} ${budget.currency} for recurring payment`\n          );\n        }\n      }\n\n      const payment = await prisma.recurringFundAndBill.findUnique({\n        where: { id: paymentId },\n      });\n\n      if (payment) {\n        if (payment.frequency === \"ONCE\") {\n          const today = new Date();\n          await prisma.recurringFundAndBill.update({\n            where: { id: paymentId },\n            data: {\n              nextExecution: null,\n              deletedAt: today,\n            },\n          });\n\n          console.log(\n            `One-time payment \"${payment.name}\" has been executed and completed`\n          );\n        } else {\n          const scheduledDate = payment.nextExecution || new Date();\n          let nextExecution = new Date(scheduledDate);\n\n          switch (payment.frequency) {\n            case \"WEEKLY\":\n              nextExecution.setDate(nextExecution.getDate() + 7);\n              break;\n            case \"BIWEEKLY\":\n              nextExecution.setDate(nextExecution.getDate() + 14);\n              break;\n            case \"MONTHLY\":\n              nextExecution.setMonth(nextExecution.getMonth() + 1);\n              break;\n            case \"QUARTERLY\":\n              nextExecution.setMonth(nextExecution.getMonth() + 3);\n              break;\n            case \"YEARLY\":\n              nextExecution.setFullYear(nextExecution.getFullYear() + 1);\n              break;\n            default:\n              nextExecution.setMonth(nextExecution.getMonth() + 1);\n          }\n\n          await prisma.recurringFundAndBill.update({\n            where: { id: paymentId },\n            data: { nextExecution: nextExecution },\n          });\n\n          console.log(\n            `Updated payment \"${payment.name}\" next execution from ${scheduledDate.toDateString()} to ${nextExecution.toDateString()}`\n          );\n        }\n      }\n\n      return transaction;\n    });\n  }\n\n  async executeRecurringIncome(\n    userId: number,\n    paymentId: number,\n    amount: number,\n    currency: CurrencyType,\n    toAccountId: number,\n    name: string,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    const account = await this.prisma.account.findFirst({\n      where: {\n        id: toAccountId,\n        userId: userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    let amountToDeposit = amount;\n    const rates = await this.getExchangeRates();\n\n    if (account.currency !== currency) {\n      if (!rates[account.currency] || !rates[currency]) {\n        throw new Error(\n          `Exchange rate not found for conversion between ${currency} and ${account.currency}`\n        );\n      }\n      amountToDeposit = amount * (rates[currency] / rates[account.currency]);\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId: userId,\n          name: name,\n          toAccountId: toAccountId,\n          description: description,\n          type: TransactionType.INCOME,\n          amount: amount,\n          currency: currency,\n        },\n        include: {\n          toAccount: true,\n        },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        toAccountId,\n        amountToDeposit,\n        true,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_INCOME,\n        `Recurring income: ${name}`\n      );\n\n      const payment = await prisma.recurringFundAndBill.findUnique({\n        where: { id: paymentId },\n      });\n\n      if (payment) {\n        if (payment.frequency === \"ONCE\") {\n          const today = new Date();\n          await prisma.recurringFundAndBill.update({\n            where: { id: paymentId },\n            data: {\n              nextExecution: null,\n              deletedAt: today,\n            },\n          });\n\n          console.log(\n            `One-time income \"${payment.name}\" has been executed and completed`\n          );\n        } else {\n          const scheduledDate = payment.nextExecution || new Date();\n          let nextExecution = new Date(scheduledDate);\n\n          switch (payment.frequency) {\n            case \"WEEKLY\":\n              nextExecution.setDate(nextExecution.getDate() + 7);\n              break;\n            case \"BIWEEKLY\":\n              nextExecution.setDate(nextExecution.getDate() + 14);\n              break;\n            case \"MONTHLY\":\n              nextExecution.setMonth(nextExecution.getMonth() + 1);\n              break;\n            case \"QUARTERLY\":\n              nextExecution.setMonth(nextExecution.getMonth() + 3);\n              break;\n            case \"YEARLY\":\n              nextExecution.setFullYear(nextExecution.getFullYear() + 1);\n              break;\n            default:\n              nextExecution.setMonth(nextExecution.getMonth() + 1);\n          }\n\n          await prisma.recurringFundAndBill.update({\n            where: { id: paymentId },\n            data: { nextExecution: nextExecution },\n          });\n\n          console.log(\n            `Updated income \"${payment.name}\" next execution from ${scheduledDate.toDateString()} to ${nextExecution.toDateString()}`\n          );\n        }\n      }\n\n      return transaction;\n    });\n  }\n\n  async manualBalanceAdjustment(\n    userId: number,\n    accountId: number,\n    amount: number,\n    changeType: BalanceChangeType,\n    description: string\n  ) {\n    const account = await this.prisma.account.findFirst({\n      where: {\n        id: accountId,\n        userId: userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      await this.updateAccountBalance(\n        prisma,\n        accountId,\n        Math.abs(amount),\n        amount > 0,\n        null,\n        changeType,\n        description\n      );\n\n      return { success: true, message: `Balance adjusted by ${amount}` };\n    });\n  }\n}\n"]}