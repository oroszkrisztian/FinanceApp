{"version":3,"file":"transactionRepository.js","sourceRoot":"","sources":["../../../src/repositories/transactionRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CurrencyType,\n  PrismaClient,\n  TransactionType,\n  BalanceChangeType,\n} from \"@prisma/client\";\nimport axios from \"axios\";\nimport { parseStringPromise } from \"xml2js\";\n\nexport class TransactionRepository {\n  private prisma: PrismaClient;\n  private exchangeRatesCache: { rates: any, timestamp: number } | null = null;\n  private readonly CACHE_DURATION = 5 * 60 * 1000;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n  }\n\n  private async recordBalanceChange(\n    prisma: any,\n    accountId: number,\n    transactionId: number | null,\n    previousBalance: number,\n    newBalance: number,\n    changeType: BalanceChangeType,\n    currency: CurrencyType,\n    description?: string\n  ) {\n    const amountChanged = newBalance - previousBalance;\n\n    await prisma.accountBalanceHistory.create({\n      data: {\n        accountId,\n        transactionId,\n        previousBalance,\n        newBalance,\n        amountChanged,\n        changeType,\n        currency,\n        description,\n      },\n    });\n  }\n\n  private async updateAccountBalance(\n    prisma: any,\n    accountId: number,\n    amount: number,\n    isIncrement: boolean,\n    transactionId: number | null,\n    changeType: BalanceChangeType,\n    description?: string\n  ) {\n    const account = await prisma.account.findUnique({\n      where: { id: accountId },\n      select: { amount: true, currency: true },\n    });\n\n    if (!account) {\n      throw new Error(`Account with id ${accountId} not found`);\n    }\n\n    const previousBalance = account.amount;\n    const newBalance = isIncrement\n      ? previousBalance + amount\n      : previousBalance - amount;\n\n    await Promise.all([\n      prisma.account.update({\n        where: { id: accountId },\n        data: {\n          amount: isIncrement ? { increment: amount } : { decrement: amount },\n        },\n      }),\n      this.recordBalanceChange(\n        prisma,\n        accountId,\n        transactionId,\n        previousBalance,\n        newBalance,\n        changeType,\n        account.currency,\n        description\n      )\n    ]);\n\n    return { previousBalance, newBalance };\n  }\n\n  async getUserAllTransactions(userId: number) {\n    return await this.prisma.transaction.findMany({\n      where: { userId },\n      select: {\n        id: true,\n        name: true,\n        description: true,\n        amount: true,\n        type: true,\n        currency: true,\n        createdAt: true,\n        transactionCategories: {\n          select: {\n            customCategoryId: true,\n            customCategory: {\n              select: {\n                id: true,\n                name: true,\n                type: true,\n              },\n            },\n          },\n        },\n        fromAccount: {\n          select: {\n            id: true,\n            name: true,\n            currency: true,\n          },\n        },\n        toAccount: {\n          select: {\n            id: true,\n            name: true,\n            currency: true,\n          },\n        },\n      },\n      orderBy: { createdAt: \"desc\" },\n    });\n  }\n\n  async getAccountBalanceHistory(accountId: number, userId: number, limit?: number) {\n    const account = await this.prisma.account.findFirst({\n      where: {\n        id: accountId,\n        userId: userId,\n        deletedAt: null,\n      },\n      select: { id: true },\n    });\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    return await this.prisma.accountBalanceHistory.findMany({\n      where: { accountId },\n      include: {\n        transaction: {\n          select: {\n            id: true,\n            name: true,\n            type: true,\n            amount: true,\n          },\n        },\n      },\n      orderBy: { createdAt: \"desc\" },\n      take: limit,\n    });\n  }\n\n  async getExchangeRates() {\n    const now = Date.now();\n    \n    if (this.exchangeRatesCache && \n        (now - this.exchangeRatesCache.timestamp) < this.CACHE_DURATION) {\n      return this.exchangeRatesCache.rates;\n    }\n\n    try {\n      const rates: { [key: string]: number } = { \"RON\": 1 };\n      const response = await axios.get(\"https://financeapp-bg0k.onrender.com/exchange-rates\");\n      const result = await parseStringPromise(response.data, {\n        explicitArray: false,\n        mergeAttrs: false,\n      });\n\n      if (result?.DataSet?.Body?.Cube?.Rate) {\n        const rateElements = Array.isArray(result.DataSet.Body.Cube.Rate)\n          ? result.DataSet.Body.Cube.Rate\n          : [result.DataSet.Body.Cube.Rate];\n\n        for (const rate of rateElements) {\n          if (rate?.$?.currency) {\n            const currency = rate.$.currency;\n            const multiplier = rate.$.multiplier ? parseInt(rate.$.multiplier) : 1;\n            const value = parseFloat(rate._);\n\n            if (currency && !isNaN(value)) {\n              rates[currency] = multiplier > 1 ? value / multiplier : value;\n            }\n          }\n        }\n      }\n\n      this.exchangeRatesCache = { rates, timestamp: now };\n      return rates;\n    } catch (error) {\n      throw new Error(\"Failed to fetch exchange rates\");\n    }\n  }\n\n  async addFundsDefaultAccount(\n    userId: number,\n    name: string | null,\n    description: string,\n    amount: number,\n    type: TransactionType,\n    toAccountId: number,\n    customCategoriesId: number[] | null,\n    currency: CurrencyType\n  ) {\n    const defaultAccount = await this.prisma.account.findFirst({\n      where: {\n        id: toAccountId,\n        userId: userId,\n        deletedAt: null,\n      },\n      select: { id: true },\n    });\n\n    if (!defaultAccount) {\n      throw new Error(\"No default account found for the user\");\n    }\n\n    let validatedCategoryIds: number[] = [];\n    if (customCategoriesId?.length) {\n      const validCategories = await this.prisma.customCategory.findMany({\n        where: {\n          id: { in: customCategoriesId },\n          OR: [{ userId: userId }, { type: \"SYSTEM\" }],\n          deletedAt: null,\n        },\n        select: { id: true },\n      });\n\n      if (validCategories.length !== customCategoriesId.length) {\n        throw new Error(\"One or more categories are invalid or don't belong to the user\");\n      }\n      validatedCategoryIds = validCategories.map(cat => cat.id);\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId: userId,\n          name: name,\n          description: description,\n          amount: amount,\n          type: type,\n          toAccountId: defaultAccount.id,\n          currency: currency,\n        },\n        select: { id: true },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        defaultAccount.id,\n        amount,\n        true,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_INCOME,\n        `Income: ${name || \"Funds added\"}`\n      );\n\n      if (validatedCategoryIds.length > 0) {\n        await prisma.transactionCategory.createMany({\n          data: validatedCategoryIds.map((categoryId) => ({\n            transactionId: transaction.id,\n            customCategoryId: categoryId,\n          })),\n        });\n      }\n\n      return prisma.transaction.findUnique({\n        where: { id: transaction.id },\n        include: {\n          toAccount: true,\n          budget: true,\n        },\n      });\n    }, { timeout: 15000 });\n  }\n\n  async addFundsSaving(\n    userId: number,\n    amount: number,\n    fromAccountId: number,\n    toSavingId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    const [fromAccount, toAccount, rates] = await Promise.all([\n      this.prisma.account.findFirst({\n        where: { id: fromAccountId, userId, deletedAt: null },\n        select: { amount: true, currency: true },\n      }),\n      this.prisma.account.findFirst({\n        where: { id: toSavingId, userId, type: \"SAVINGS\", deletedAt: null },\n        include: { savingAccount: true },\n      }),\n      this.getExchangeRates()\n    ]);\n\n    if (!fromAccount) {\n      throw new Error(\"Source account not found or doesn't belong to the user\");\n    }\n\n    if (!toAccount) {\n      throw new Error(\"Savings account not found or doesn't belong to the user\");\n    }\n\n    let amountToWithdraw = amount;\n    if (fromAccount.currency !== currency) {\n      if (!rates[fromAccount.currency] || !rates[currency]) {\n        throw new Error(`Exchange rate not found for conversion between ${currency} and ${fromAccount.currency}`);\n      }\n      amountToWithdraw = amount * (rates[currency] / rates[fromAccount.currency]);\n    }\n\n    if (fromAccount.amount < amountToWithdraw) {\n      throw new Error(\n        `Insufficient funds in source account. Available: ${fromAccount.amount} ${fromAccount.currency}, Required: ${amountToWithdraw.toFixed(2)} ${fromAccount.currency}`\n      );\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId,\n          amount,\n          type,\n          fromAccountId: fromAccountId,\n          toAccountId: toSavingId,\n          currency,\n        },\n        select: { id: true },\n      });\n\n      await Promise.all([\n        this.updateAccountBalance(\n          prisma,\n          fromAccountId,\n          amountToWithdraw,\n          false,\n          transaction.id,\n          BalanceChangeType.TRANSACTION_TRANSFER_OUT,\n          `Transfer to savings account`\n        ),\n        this.updateAccountBalance(\n          prisma,\n          toSavingId,\n          amount,\n          true,\n          transaction.id,\n          BalanceChangeType.TRANSACTION_TRANSFER_IN,\n          `Transfer from main account`\n        )\n      ]);\n\n      if (toAccount.savingAccount && !toAccount.savingAccount.isCompleted) {\n        const updatedAmount = toAccount.amount + amount;\n        if (updatedAmount >= toAccount.savingAccount.targetAmount) {\n          await prisma.savingAccount.update({\n            where: { id: toAccount.savingAccount.id },\n            data: { isCompleted: true },\n          });\n        }\n      }\n\n      return prisma.transaction.findUnique({\n        where: { id: transaction.id },\n        include: {\n          fromAccount: true,\n          toAccount: true,\n          budget: true,\n        },\n      });\n    }, { timeout: 15000 });\n  }\n\n  async addFundsDefault(\n    userId: number,\n    amount: number,\n    fromSavingId: number,\n    toAccountId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    const [fromAccount, toAccount, rates] = await Promise.all([\n      this.prisma.account.findFirst({\n        where: { id: fromSavingId, userId, type: \"SAVINGS\", deletedAt: null },\n        include: { savingAccount: true },\n      }),\n      this.prisma.account.findFirst({\n        where: { id: toAccountId, userId, deletedAt: null },\n        select: { id: true, currency: true },\n      }),\n      this.getExchangeRates()\n    ]);\n\n    if (!fromAccount) {\n      throw new Error(\"Source savings account not found or doesn't belong to the user\");\n    }\n\n    if (!toAccount) {\n      throw new Error(\"Destination account not found or doesn't belong to the user\");\n    }\n\n    let amountToWithdraw = amount;\n    if (fromAccount.currency !== currency) {\n      if (!rates[fromAccount.currency] || !rates[currency]) {\n        throw new Error(`Exchange rate not found for conversion between ${currency} and ${fromAccount.currency}`);\n      }\n      amountToWithdraw = amount * (rates[currency] / rates[fromAccount.currency]);\n    }\n\n    if (fromAccount.amount < amountToWithdraw) {\n      throw new Error(\n        `Insufficient funds in savings account. Available: ${fromAccount.amount} ${fromAccount.currency}, Required: ${amountToWithdraw.toFixed(2)} ${fromAccount.currency}`\n      );\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId,\n          amount,\n          type,\n          fromAccountId: fromSavingId,\n          toAccountId: toAccountId,\n          currency,\n        },\n        select: { id: true },\n      });\n\n      await Promise.all([\n        this.updateAccountBalance(\n          prisma,\n          fromSavingId,\n          amountToWithdraw,\n          false,\n          transaction.id,\n          BalanceChangeType.TRANSACTION_TRANSFER_OUT,\n          `Transfer from savings to main account`\n        ),\n        this.updateAccountBalance(\n          prisma,\n          toAccountId,\n          amount,\n          true,\n          transaction.id,\n          BalanceChangeType.TRANSACTION_TRANSFER_IN,\n          `Transfer from savings account`\n        )\n      ]);\n\n      return prisma.transaction.findUnique({\n        where: { id: transaction.id },\n        include: {\n          fromAccount: true,\n          toAccount: true,\n          budget: true,\n        },\n      });\n    }, { timeout: 15000 });\n  }\n\n  async createExpense(\n    amount: number,\n    currency: CurrencyType,\n    userId: number,\n    name: string,\n    fromAccountId: number,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    const [account, rates] = await Promise.all([\n      this.prisma.account.findFirst({\n        where: { id: fromAccountId, userId: userId, deletedAt: null },\n        select: { amount: true, currency: true },\n      }),\n      this.getExchangeRates()\n    ]);\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    let amountToWithdraw = amount;\n    if (account.currency !== currency) {\n      if (!rates[account.currency] || !rates[currency]) {\n        throw new Error(`Exchange rate not found for conversion between ${currency} and ${account.currency}`);\n      }\n      amountToWithdraw = amount * (rates[currency] / rates[account.currency]);\n    }\n\n    if (account.amount < amountToWithdraw) {\n      throw new Error(\n        `Insufficient funds in account. Available: ${account.amount} ${account.currency}, Required: ${amountToWithdraw.toFixed(2)} ${account.currency}`\n      );\n    }\n\n    let validatedCategoryIds: number[] = [];\n    let budgetUpdates: Array<{id: number, budgetAmount: number}> = [];\n\n    if (customCategoriesId?.length) {\n      const [validCategories, budgets] = await Promise.all([\n        this.prisma.customCategory.findMany({\n          where: {\n            id: { in: customCategoriesId },\n            OR: [{ userId: userId }, { type: \"SYSTEM\" }],\n            deletedAt: null,\n          },\n          select: { id: true },\n        }),\n        this.prisma.budget.findMany({\n          where: {\n            userId: userId,\n            deletedAt: null,\n            budgetCategories: {\n              some: { customCategoryId: { in: customCategoriesId } },\n            },\n          },\n          select: { id: true, currency: true },\n        })\n      ]);\n\n      if (validCategories.length !== customCategoriesId.length) {\n        throw new Error(\"One or more categories are invalid or don't belong to the user\");\n      }\n\n      validatedCategoryIds = validCategories.map(cat => cat.id);\n      budgetUpdates = budgets.map(budget => {\n        let budgetAmount = amount;\n        if (currency !== budget.currency && rates[budget.currency]) {\n          budgetAmount = amount * (rates[currency] / rates[budget.currency]);\n        }\n        return { id: budget.id, budgetAmount };\n      });\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId: userId,\n          name: name,\n          fromAccountId: fromAccountId,\n          description: description,\n          type: TransactionType.EXPENSE,\n          amount: amount,\n          currency: currency,\n        },\n        select: { id: true },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        fromAccountId,\n        amountToWithdraw,\n        false,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_EXPENSE,\n        `Expense: ${name}`\n      );\n\n      if (validatedCategoryIds.length > 0) {\n        await prisma.transactionCategory.createMany({\n          data: validatedCategoryIds.map((categoryId) => ({\n            transactionId: transaction.id,\n            customCategoryId: categoryId,\n          })),\n        });\n\n        if (budgetUpdates.length > 0) {\n          await Promise.all(\n            budgetUpdates.map(({ id, budgetAmount }) =>\n              prisma.budget.update({\n                where: { id },\n                data: {\n                  currentSpent: { increment: budgetAmount },\n                  transactions: { connect: { id: transaction.id } },\n                },\n              })\n            )\n          );\n        }\n      }\n\n      return prisma.transaction.findUnique({\n        where: { id: transaction.id },\n        include: { fromAccount: true },\n      });\n    }, { timeout: 15000 });\n  }\n\n  async transferFundsDefault(\n    userId: number,\n    amount: number,\n    fromAccountId: number,\n    toAccountId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    const [fromAccount, toAccount, rates] = await Promise.all([\n      this.prisma.account.findFirst({\n        where: { id: fromAccountId, userId, deletedAt: null },\n        select: { amount: true, currency: true, name: true },\n      }),\n      this.prisma.account.findFirst({\n        where: { id: toAccountId, userId, deletedAt: null },\n        select: { currency: true, name: true },\n      }),\n      this.getExchangeRates()\n    ]);\n\n    if (!fromAccount) {\n      throw new Error(\"Source account not found or doesn't belong to the user\");\n    }\n\n    if (!toAccount) {\n      throw new Error(\"Destination account not found or doesn't belong to the user\");\n    }\n\n    if (fromAccount.amount < amount) {\n      throw new Error(\n        `Insufficient funds in source account. Available: ${fromAccount.amount} ${fromAccount.currency}, Required: ${amount} ${fromAccount.currency}`\n      );\n    }\n\n    let amountToDeposit = amount;\n    if (toAccount.currency !== currency) {\n      if (!rates[toAccount.currency] || !rates[currency]) {\n        throw new Error(`Exchange rate not found for conversion between ${currency} and ${toAccount.currency}`);\n      }\n      amountToDeposit = amount * (rates[currency] / rates[toAccount.currency]);\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId,\n          amount,\n          type,\n          fromAccountId: fromAccountId,\n          toAccountId: toAccountId,\n          currency,\n        },\n        select: { id: true },\n      });\n\n      await Promise.all([\n        this.updateAccountBalance(\n          prisma,\n          fromAccountId,\n          amount,\n          false,\n          transaction.id,\n          BalanceChangeType.TRANSACTION_TRANSFER_OUT,\n          `Transfer to account ${toAccount.name}`\n        ),\n        this.updateAccountBalance(\n          prisma,\n          toAccountId,\n          amountToDeposit,\n          true,\n          transaction.id,\n          BalanceChangeType.TRANSACTION_TRANSFER_IN,\n          `Transfer from account ${fromAccount.name}`\n        )\n      ]);\n\n      return prisma.transaction.findUnique({\n        where: { id: transaction.id },\n        include: {\n          fromAccount: true,\n          toAccount: true,\n          budget: true,\n        },\n      });\n    }, { timeout: 15000 });\n  }\n\n  async executeRecurringPayment(\n    userId: number,\n    paymentId: number,\n    amount: number,\n    currency: CurrencyType,\n    fromAccountId: number,\n    name: string,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    const [account, rates] = await Promise.all([\n      this.prisma.account.findFirst({\n        where: { id: fromAccountId, userId: userId, deletedAt: null },\n        select: { amount: true, currency: true },\n      }),\n      this.getExchangeRates()\n    ]);\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    let amountToWithdraw = amount;\n    if (account.currency !== currency) {\n      if (!rates[account.currency] || !rates[currency]) {\n        throw new Error(`Exchange rate not found for conversion between ${currency} and ${account.currency}`);\n      }\n      amountToWithdraw = amount * (rates[currency] / rates[account.currency]);\n    }\n\n    if (account.amount < amountToWithdraw) {\n      throw new Error(\n        `Insufficient funds in account. Available: ${account.amount} ${account.currency}, Required: ${amountToWithdraw.toFixed(2)} ${account.currency}`\n      );\n    }\n\n    let validatedCategoryIds: number[] = [];\n    let budgetUpdates: Array<{id: number, budgetAmount: number}> = [];\n    \n    const [validCategories, budgets, payment] = await Promise.all([\n      customCategoriesId?.length ? this.prisma.customCategory.findMany({\n        where: {\n          id: { in: customCategoriesId },\n          OR: [{ userId: userId }, { type: \"SYSTEM\" }],\n          deletedAt: null,\n        },\n        select: { id: true },\n      }) : Promise.resolve([]),\n      customCategoriesId?.length ? this.prisma.budget.findMany({\n        where: {\n          userId: userId,\n          deletedAt: null,\n          budgetCategories: {\n            some: { customCategoryId: { in: customCategoriesId } },\n          },\n        },\n        select: { id: true, currency: true },\n      }) : Promise.resolve([]),\n      this.prisma.recurringFundAndBill.findUnique({\n        where: { id: paymentId },\n        select: { id: true, name: true, frequency: true, nextExecution: true },\n      })\n    ]);\n\n    if (customCategoriesId?.length && validCategories.length !== customCategoriesId.length) {\n      throw new Error(\"One or more categories are invalid or don't belong to the user\");\n    }\n\n    if (validCategories.length > 0) {\n      validatedCategoryIds = validCategories.map(cat => cat.id);\n      budgetUpdates = budgets.map(budget => {\n        let budgetAmount = amount;\n        if (currency !== budget.currency && rates[budget.currency]) {\n          budgetAmount = amount * (rates[currency] / rates[budget.currency]);\n        }\n        return { id: budget.id, budgetAmount };\n      });\n    }\n\n    let nextExecutionUpdate: { nextExecution?: Date | null, deletedAt?: Date } = {};\n    if (payment) {\n      if (payment.frequency === \"ONCE\") {\n        nextExecutionUpdate = {\n          nextExecution: null,\n          deletedAt: new Date(),\n        };\n      } else {\n        const scheduledDate = payment.nextExecution || new Date();\n        let nextExecution = new Date(scheduledDate);\n\n        switch (payment.frequency) {\n          case \"WEEKLY\":\n            nextExecution.setDate(nextExecution.getDate() + 7);\n            break;\n          case \"BIWEEKLY\":\n            nextExecution.setDate(nextExecution.getDate() + 14);\n            break;\n          case \"MONTHLY\":\n            nextExecution.setMonth(nextExecution.getMonth() + 1);\n            break;\n          case \"QUARTERLY\":\n            nextExecution.setMonth(nextExecution.getMonth() + 3);\n            break;\n          case \"YEARLY\":\n            nextExecution.setFullYear(nextExecution.getFullYear() + 1);\n            break;\n          default:\n            nextExecution.setMonth(nextExecution.getMonth() + 1);\n        }\n\n        nextExecutionUpdate = { nextExecution };\n      }\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId: userId,\n          name: name,\n          fromAccountId: fromAccountId,\n          description: description,\n          type: TransactionType.EXPENSE,\n          amount: amount,\n          currency: currency,\n        },\n        select: { id: true },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        fromAccountId,\n        amountToWithdraw,\n        false,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_EXPENSE,\n        `Recurring payment: ${name}`\n      );\n\n      if (validatedCategoryIds.length > 0) {\n        await prisma.transactionCategory.createMany({\n          data: validatedCategoryIds.map((categoryId) => ({\n            transactionId: transaction.id,\n            customCategoryId: categoryId,\n          })),\n        });\n\n        if (budgetUpdates.length > 0) {\n          await Promise.all(\n            budgetUpdates.map(({ id, budgetAmount }) =>\n              prisma.budget.update({\n                where: { id },\n                data: {\n                  currentSpent: { increment: budgetAmount },\n                  transactions: { connect: { id: transaction.id } },\n                },\n              })\n            )\n          );\n        }\n      }\n\n      if (payment && Object.keys(nextExecutionUpdate).length > 0) {\n        await prisma.recurringFundAndBill.update({\n          where: { id: paymentId },\n          data: nextExecutionUpdate,\n        });\n      }\n\n      return prisma.transaction.findUnique({\n        where: { id: transaction.id },\n        include: { fromAccount: true },\n      });\n    }, { timeout: 15000 });\n  }\n\n  async executeRecurringIncome(\n    userId: number,\n    paymentId: number,\n    amount: number,\n    currency: CurrencyType,\n    toAccountId: number,\n    name: string,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    const [account, rates, payment] = await Promise.all([\n      this.prisma.account.findFirst({\n        where: { id: toAccountId, userId: userId, deletedAt: null },\n        select: { currency: true },\n      }),\n      this.getExchangeRates(),\n      this.prisma.recurringFundAndBill.findUnique({\n        where: { id: paymentId },\n        select: { id: true, name: true, frequency: true, nextExecution: true },\n      })\n    ]);\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    let amountToDeposit = amount;\n    if (account.currency !== currency) {\n      if (!rates[account.currency] || !rates[currency]) {\n        throw new Error(`Exchange rate not found for conversion between ${currency} and ${account.currency}`);\n      }\n      amountToDeposit = amount * (rates[currency] / rates[account.currency]);\n    }\n\n    let nextExecutionUpdate: { nextExecution?: Date | null, deletedAt?: Date } = {};\n    if (payment) {\n      if (payment.frequency === \"ONCE\") {\n        nextExecutionUpdate = {\n          nextExecution: null,\n          deletedAt: new Date(),\n        };\n      } else {\n        const scheduledDate = payment.nextExecution || new Date();\n        let nextExecution = new Date(scheduledDate);\n\n        switch (payment.frequency) {\n          case \"WEEKLY\":\n            nextExecution.setDate(nextExecution.getDate() + 7);\n            break;\n          case \"BIWEEKLY\":\n            nextExecution.setDate(nextExecution.getDate() + 14);\n            break;\n          case \"MONTHLY\":\n            nextExecution.setMonth(nextExecution.getMonth() + 1);\n            break;\n          case \"QUARTERLY\":\n            nextExecution.setMonth(nextExecution.getMonth() + 3);\n            break;\n          case \"YEARLY\":\n            nextExecution.setFullYear(nextExecution.getFullYear() + 1);\n            break;\n          default:\n            nextExecution.setMonth(nextExecution.getMonth() + 1);\n        }\n\n        nextExecutionUpdate = { nextExecution };\n      }\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      const transaction = await prisma.transaction.create({\n        data: {\n          userId: userId,\n          name: name,\n          toAccountId: toAccountId,\n          description: description,\n          type: TransactionType.INCOME,\n          amount: amount,\n          currency: currency,\n        },\n        select: { id: true },\n      });\n\n      await this.updateAccountBalance(\n        prisma,\n        toAccountId,\n        amountToDeposit,\n        true,\n        transaction.id,\n        BalanceChangeType.TRANSACTION_INCOME,\n        `Recurring income: ${name}`\n      );\n\n      if (payment && Object.keys(nextExecutionUpdate).length > 0) {\n        await prisma.recurringFundAndBill.update({\n          where: { id: paymentId },\n          data: nextExecutionUpdate,\n        });\n      }\n\n      return prisma.transaction.findUnique({\n        where: { id: transaction.id },\n        include: { toAccount: true },\n      });\n    }, { timeout: 15000 });\n  }\n\n  async manualBalanceAdjustment(\n    userId: number,\n    accountId: number,\n    amount: number,\n    changeType: BalanceChangeType,\n    description: string\n  ) {\n    const account = await this.prisma.account.findFirst({\n      where: {\n        id: accountId,\n        userId: userId,\n        deletedAt: null,\n      },\n      select: { id: true },\n    });\n\n    if (!account) {\n      throw new Error(\"Account not found or doesn't belong to the user\");\n    }\n\n    return await this.prisma.$transaction(async (prisma) => {\n      await this.updateAccountBalance(\n        prisma,\n        accountId,\n        Math.abs(amount),\n        amount > 0,\n        null,\n        changeType,\n        description\n      );\n\n      return { success: true, message: `Balance adjusted by ${amount}` };\n    }, { timeout: 10000 });\n  }\n}"]}