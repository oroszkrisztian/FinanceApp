{"version":3,"file":"accountsRepository.js","sourceRoot":"","sources":["../../../src/repositories/accountsRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AccountType,\n  CurrencyType,\n  PrismaClient,\n  BalanceChangeType,\n} from \"@prisma/client\";\nimport axios from \"axios\";\nimport { parseStringPromise } from \"xml2js\";\n\nexport class AccountsRepository {\n  private prisma: PrismaClient;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n  }\n\n  async getUserAllAccount(userId: number, startDate?: Date, endDate?: Date) {\n    const includeOptions: any = {\n      savingAccount: true, \n    };\n\n   \n    if (startDate && endDate) {\n      includeOptions.balanceHistory = {\n        where: {\n          createdAt: {\n            gte: startDate,\n            lte: endDate,\n          },\n        },\n        orderBy: {\n          createdAt: \"asc\", \n        },\n      };\n    }\n\n    return await this.prisma.account.findMany({\n      where: {\n        userId: userId,\n      },\n      include: includeOptions,\n    });\n  }\n\n  async getUserDefaultAccounts(userId: number) {\n    return await this.prisma.account.findMany({\n      where: {\n        userId: userId,\n        type: AccountType.DEFAULT,\n        deletedAt: null,\n      },\n    });\n  }\n\n  async getUserSavingAccounts(userId: number) {\n    const savingAccount = await this.prisma.account.findMany({\n      where: {\n        userId: userId,\n        type: AccountType.SAVINGS,\n        deletedAt: null,\n      },\n      include: {\n        savingAccount: true,\n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n\n    return savingAccount;\n  }\n\n  async createDefaultAccount(\n    userId: number,\n    accountType: AccountType,\n    currencyType: CurrencyType,\n    name: string,\n    description: string\n  ) {\n    return await this.prisma.account.create({\n      data: {\n        name: name,\n        description: description,\n        userId: userId,\n        type: accountType,\n        currency: currencyType,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  async createSavingAccount(\n    userId: number,\n    accountType: AccountType,\n    currencyType: CurrencyType,\n    name: string,\n    description: string,\n    targetAmount: number,\n    targetDate?: Date\n  ) {\n    const account = await this.prisma.account.create({\n      data: {\n        name: name,\n        description: description,\n        userId: userId,\n        type: accountType,\n        currency: currencyType,\n        isDefault: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n\n    const formattedDate = targetDate ? new Date(targetDate) : undefined;\n\n    const savingAccount = await this.prisma.savingAccount.create({\n      data: {\n        accountId: account.id,\n        targetAmount: targetAmount,\n        targetDate: formattedDate,\n        isCompleted: false,\n      },\n    });\n\n    return { account, savingAccount };\n  }\n\n  async searchAccountByString(userId: number, searchString: string) {\n    return await this.prisma.account.findMany({\n      where: {\n        userId: userId,\n        type: AccountType.SAVINGS,\n        name: {\n          contains: searchString,\n        },\n      },\n      include: {\n        savingAccount: true,\n      },\n    });\n  }\n\n  async deleteDefaultAccount(userId: number, accountId: number) {\n    return await this.prisma.account.update({\n      where: {\n        id: accountId,\n        userId: userId,\n        type: AccountType.DEFAULT,\n      },\n      data: {\n        deletedAt: new Date(),\n      },\n    });\n  }\n\n  async deleteSavingAccount(userId: number, accountId: number) {\n    await this.prisma.account.update({\n      where: {\n        id: accountId,\n        userId: userId,\n        type: AccountType.SAVINGS,\n      },\n      data: {\n        deletedAt: new Date(),\n      },\n    });\n  }\n\n  private async recordBalanceChange(\n    prisma: any,\n    accountId: number,\n    previousBalance: number,\n    newBalance: number,\n    changeType: BalanceChangeType,\n    currency: CurrencyType,\n    description?: string\n  ) {\n    const amountChanged = newBalance - previousBalance;\n\n    await prisma.accountBalanceHistory.create({\n      data: {\n        accountId,\n        transactionId: null,\n        previousBalance,\n        newBalance,\n        amountChanged,\n        changeType,\n        currency,\n        description,\n      },\n    });\n  }\n\n  async editDefaultAccount(\n    userId: number,\n    accountId: number,\n    name: string,\n    description: string,\n    currency: CurrencyType,\n    accountType: AccountType,\n    amount?: number\n  ) {\n    return await this.prisma.$transaction(async (prisma) => {\n      const account = await prisma.account.findFirst({\n        where: {\n          id: accountId,\n          userId: userId,\n          type: accountType,\n        },\n      });\n\n      if (!account) {\n        throw new Error(\"Account not found\");\n      }\n\n      const updateData: any = {\n        name: name,\n        description: description,\n        currency: currency,\n        updatedAt: new Date(),\n      };\n\n      if (amount !== undefined) {\n        updateData.amount = amount;\n\n        await this.recordBalanceChange(\n          prisma,\n          accountId,\n          account.amount,\n          amount,\n          BalanceChangeType.MANUAL_ADJUSTMENT,\n          currency,\n          \"Manual balance adjustment\"\n        );\n      }\n\n      if (account.currency !== currency && amount === undefined) {\n        await this.recordBalanceChange(\n          prisma,\n          accountId,\n          account.amount,\n          account.amount, \n          BalanceChangeType.MANUAL_ADJUSTMENT,\n          currency,\n          `Currency changed from ${account.currency} to ${currency}`\n        );\n      }\n\n      return await prisma.account.update({\n        where: {\n          id: accountId,\n          userId: userId,\n          type: accountType,\n        },\n        data: updateData,\n      });\n    });\n  }\n\n  private async getExchangeRates() {\n    try {\n      const response = await axios.get(\"https://financeapp-bg0k.onrender.com/exchange-rates\");\n      const xmlText = response.data;\n      const result = await parseStringPromise(xmlText, {\n        explicitArray: false,\n        mergeAttrs: false,\n      });\n      const rates: { [key: string]: number } = { RON: 1 };\n\n      if (result?.DataSet?.Body?.Cube?.Rate) {\n        const rateElements = Array.isArray(result.DataSet.Body.Cube.Rate)\n          ? result.DataSet.Body.Cube.Rate\n          : [result.DataSet.Body.Cube.Rate];\n\n        for (const rate of rateElements) {\n          if (rate?.$?.currency) {\n            const currency = rate.$.currency;\n            const multiplier = rate.$.multiplier\n              ? parseInt(rate.$.multiplier)\n              : 1;\n            const value = parseFloat(rate._);\n            if (currency && !isNaN(value)) {\n              rates[currency] = multiplier > 1 ? value / multiplier : value;\n            }\n          }\n        }\n      }\n      return rates;\n    } catch (error) {\n      console.error(\"Error fetching exchange rates:\", error);\n      throw new Error(\"Failed to fetch exchange rates\");\n    }\n  }\n\n  async editSavingAccount(\n    userId: number,\n    accountId: number,\n    name: string,\n    description: string,\n    currency: CurrencyType,\n    accountType: AccountType,\n    targetAmount: number,\n    targetDate: Date,\n    amount?: number\n  ) {\n    return await this.prisma.$transaction(async (prisma) => {\n      const account = await prisma.account.findFirst({\n        where: {\n          id: accountId,\n          userId: userId,\n          type: accountType,\n        },\n      });\n\n      if (!account) {\n        throw new Error(\"Account not found\");\n      }\n\n      const updateData: any = {\n        name,\n        description,\n        updatedAt: new Date(),\n      };\n\n     \n      if (account.currency !== currency || amount !== undefined) {\n        updateData.currency = currency;\n\n        let newAmount: number;\n\n        if (amount !== undefined) {\n          newAmount = amount;\n        } else if (account.currency !== currency) {\n        \n          const rates = await this.getExchangeRates();\n          if (!rates[account.currency] || !rates[currency]) {\n            throw new Error(\n              `Exchange rate not found for conversion between ${currency} and ${account.currency}`\n            );\n          }\n          newAmount =\n            account.amount * (rates[account.currency] / rates[currency]);\n        } else {\n          newAmount = account.amount;\n        }\n\n        updateData.amount = newAmount;\n\n        await this.recordBalanceChange(\n          prisma,\n          accountId,\n          account.amount,\n          newAmount,\n          BalanceChangeType.MANUAL_ADJUSTMENT,\n          currency,\n          account.currency !== currency\n            ? `Currency changed from ${account.currency} to ${currency}`\n            : \"Manual balance adjustment\"\n        );\n      }\n\n      await prisma.account.update({\n        where: {\n          id: accountId,\n          userId: userId,\n          type: accountType,\n        },\n        data: updateData,\n      });\n\n      return await prisma.savingAccount.update({\n        where: {\n          accountId: accountId,\n        },\n        data: {\n          targetAmount: targetAmount,\n          targetDate: targetDate,\n        },\n      });\n    });\n  }\n}\n"]}