{"version":3,"file":"paymentsRepository.js","sourceRoot":"","sources":["../../../src/repositories/paymentsRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CurrencyType,\n  Frequency,\n  PaymentType,\n  PrismaClient,\n} from \"@prisma/client\";\n\nexport class PaymentsRepository {\n  private prisma: PrismaClient;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n  }\n\n  async createPayment(\n    userId: number,\n    name: string,\n    amount: number,\n    description: string | null,\n    accountId: number,\n    startDate: Date,\n    frequency: Frequency,\n    emailNotification: boolean,\n    notificationDay: number,\n    automaticPayment: boolean,\n    type: PaymentType,\n    currency: CurrencyType,\n    categoriesId: number[] | null,\n    paymentId?: number \n  ) {\n    return await this.prisma.$transaction(async (tx) => {\n      if (paymentId) {\n\n        await tx.recurringBillCategory.deleteMany({\n          where: {\n            recurringFundAndBillId: paymentId,\n          },\n        });\n\n        const updatedPayment = await tx.recurringFundAndBill.update({\n          where: {\n            id: paymentId,\n            user: {\n              some: {\n                id: userId,\n              },\n            },\n          },\n          data: {\n            name: name,\n            amount: amount,\n            description: description,\n            accountId: accountId,\n            frequency: frequency,\n            emailNotification: emailNotification,\n            notificationDay: notificationDay || 0,\n            automaticAddition: automaticPayment,\n            nextExecution: startDate,\n            type: type,\n            currency: currency,\n            ...(categoriesId &&\n              categoriesId.length > 0 && {\n                categories: {\n                  create: categoriesId.map((categoryId) => ({\n                    customCategoryId: categoryId,\n                  })),\n                },\n              }),\n          },\n          include: {\n            account: true,\n            user: true,\n            categories: {\n              include: {\n                customCategory: true,\n              },\n            },\n          },\n        });\n\n        return updatedPayment;\n      } else {\n        const payment = await tx.recurringFundAndBill.create({\n          data: {\n            name: name,\n            amount: amount,\n            description: description,\n            accountId: accountId,\n            frequency: frequency,\n            emailNotification: emailNotification,\n            notificationDay: notificationDay || 0,\n            automaticAddition: automaticPayment,\n            nextExecution: startDate,\n            type: type,\n            currency: currency,\n            user: {\n              connect: { id: userId },\n            },\n            ...(categoriesId &&\n              categoriesId.length > 0 && {\n                categories: {\n                  create: categoriesId.map((categoryId) => ({\n                    customCategoryId: categoryId,\n                  })),\n                },\n              }),\n          },\n          include: {\n            account: true,\n            user: true,\n            categories: {\n              include: {\n                customCategory: true,\n              },\n            },\n          },\n        });\n\n        return payment;\n      }\n    });\n  }\n\n  async getAllPayments(userId: number) {\n    const payments = await this.prisma.recurringFundAndBill.findMany({\n      where: {\n        user: {\n          some: {\n            id: userId,\n          },\n        },\n        deletedAt: null,\n      },\n      include: {\n        account: true,\n        user: true,\n        categories: {\n          include: {\n            customCategory: true,\n          },\n          where: {\n            deletedAt: null,\n          },\n        },\n      },\n      orderBy: {\n        nextExecution: \"asc\",\n      },\n    });\n\n    return payments;\n  }\n\n  async deletePayment(userId: number, paymentId: number) {\n    return await this.prisma.$transaction(async (tx) => {\n      await tx.recurringBillCategory.deleteMany({\n        where: {\n          recurringFundAndBillId: paymentId,\n        },\n      });\n      const deletedPayment = await tx.recurringFundAndBill.update({\n        where: {\n          id: paymentId,\n          user: {\n            some: {\n              id: userId,\n            },\n          },\n        },\n        data: {\n          deletedAt: new Date(),\n        },\n      });\n\n      return deletedPayment;\n    });\n  }\n}\n"]}