{"version":3,"file":"paymentsRepository.js","sourceRoot":"","sources":["../../../src/repositories/paymentsRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CurrencyType,\n  Frequency,\n  PaymentType,\n  PrismaClient,\n} from \"@prisma/client\";\n\nexport class PaymentsRepository {\n  private prisma: PrismaClient;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n  }\n\n  async createPayment(\n    userId: number,\n    name: string,\n    amount: number,\n    description: string | null,\n    accountId: number,\n    startDate: Date,\n    frequency: Frequency,\n    emailNotification: boolean,\n    notificationDay: number,\n    automaticPayment: boolean,\n    type: PaymentType,\n    currency: CurrencyType,\n    categoriesId: number[] | null,\n    paymentId?: number \n  ) {\n    return await this.prisma.$transaction(async (tx) => {\n      if (paymentId) {\n        console.log(\"🔄 Starting payment update process...\");\n        console.log(\"📊 Update parameters:\", {\n          paymentId,\n          userId,\n          name,\n          amount,\n          description,\n          accountId,\n          startDate,\n          frequency,\n          emailNotification,\n          notificationDay,\n          automaticPayment,\n          type,\n          currency,\n          categoriesId\n        });\n\n        console.log(\"🗑️ Deleting existing categories for payment:\", paymentId);\n        await tx.recurringBillCategory.deleteMany({\n          where: {\n            recurringFundAndBillId: paymentId,\n          },\n        });\n        console.log(\"✅ Existing categories deleted\");\n\n        console.log(\"📝 Preparing update data...\");\n        const updateData = {\n          name: name,\n          amount: amount,\n          description: description,\n          accountId: accountId,\n          frequency: frequency,\n          emailNotification: emailNotification,\n          notificationDay: notificationDay || 0,\n          automaticAddition: automaticPayment,\n          nextExecution: startDate,\n          type: type,\n          currency: currency,\n          ...(categoriesId &&\n            categoriesId.length > 0 && {\n              categories: {\n                create: categoriesId.map((categoryId) => ({\n                  customCategoryId: categoryId,\n                })),\n              },\n            }),\n        };\n\n        console.log(\"💾 Update data prepared:\", updateData);\n        console.log(\"🎯 automaticAddition value:\", automaticPayment);\n\n        const updatedPayment = await tx.recurringFundAndBill.update({\n          where: {\n            id: paymentId,\n            user: {\n              some: {\n                id: userId,\n              },\n            },\n          },\n          data: updateData,\n          include: {\n            account: true,\n            user: true,\n            categories: {\n              include: {\n                customCategory: true,\n              },\n            },\n          },\n        });\n\n        console.log(\"✅ Payment updated successfully!\");\n        console.log(\"📋 Updated payment result:\", {\n          id: updatedPayment.id,\n          name: updatedPayment.name,\n          amount: updatedPayment.amount,\n          automaticAddition: updatedPayment.automaticAddition,\n          emailNotification: updatedPayment.emailNotification,\n          notificationDay: updatedPayment.notificationDay,\n          frequency: updatedPayment.frequency,\n          categoriesCount: updatedPayment.categories.length\n        });\n\n        return updatedPayment;\n      } else {\n        console.log(\"🆕 Creating new payment...\");\n        console.log(\"📊 Create parameters:\", {\n          userId,\n          name,\n          amount,\n          automaticPayment,\n          emailNotification\n        });\n\n        const payment = await tx.recurringFundAndBill.create({\n          data: {\n            name: name,\n            amount: amount,\n            description: description,\n            accountId: accountId,\n            frequency: frequency,\n            emailNotification: emailNotification,\n            notificationDay: notificationDay || 0,\n            automaticAddition: automaticPayment,\n            nextExecution: startDate,\n            type: type,\n            currency: currency,\n            user: {\n              connect: { id: userId },\n            },\n            ...(categoriesId &&\n              categoriesId.length > 0 && {\n                categories: {\n                  create: categoriesId.map((categoryId) => ({\n                    customCategoryId: categoryId,\n                  })),\n                },\n              }),\n          },\n          include: {\n            account: true,\n            user: true,\n            categories: {\n              include: {\n                customCategory: true,\n              },\n            },\n          },\n        });\n\n        console.log(\"✅ Payment created successfully!\");\n        console.log(\"📋 Created payment result:\", {\n          id: payment.id,\n          name: payment.name,\n          automaticAddition: payment.automaticAddition\n        });\n\n        return payment;\n      }\n    });\n  }\n\n  async getAllPayments(userId: number) {\n    const payments = await this.prisma.recurringFundAndBill.findMany({\n      where: {\n        user: {\n          some: {\n            id: userId,\n          },\n        },\n        deletedAt: null,\n      },\n      include: {\n        account: true,\n        user: true,\n        categories: {\n          include: {\n            customCategory: true,\n          },\n          where: {\n            deletedAt: null,\n          },\n        },\n      },\n      orderBy: {\n        nextExecution: \"asc\",\n      },\n    });\n\n    return payments;\n  }\n\n  async deletePayment(userId: number, paymentId: number) {\n    return await this.prisma.$transaction(async (tx) => {\n      await tx.recurringBillCategory.deleteMany({\n        where: {\n          recurringFundAndBillId: paymentId,\n        },\n      });\n      const deletedPayment = await tx.recurringFundAndBill.update({\n        where: {\n          id: paymentId,\n          user: {\n            some: {\n              id: userId,\n            },\n          },\n        },\n        data: {\n          deletedAt: new Date(),\n        },\n      });\n\n      return deletedPayment;\n    });\n  }\n}"]}