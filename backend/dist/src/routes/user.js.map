{"version":3,"file":"user.js","sourceRoot":"","sources":["../../../src/routes/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hono } from \"hono\";\nimport { UserRepository } from \"../repositories/userRepository\";\nimport { verifyToken } from \"../middleware/auth\";\nimport bcrypt from \"bcrypt\";\n\nconst users = new Hono();\nconst userRepository = new UserRepository();\n\nusers.use(\"*\", verifyToken);\n\nusers.post(\"/getUser\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n\n    const user = await userRepository.findById(userId);\n    \n    if (!user) {\n      return c.json({ error: \"User not found\" }, 404);\n    }\n\n    const { password, ...userWithoutPassword } = user;\n    return c.json({ user: userWithoutPassword }, 200);\n    \n  } catch (error) {\n    console.error(\"Error in /getUser route:\", error);\n    if (error instanceof Error) {\n      return c.json({ error: error.message }, 500);\n    }\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\nusers.post(\"/editUser\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const body = await c.req.json();\n    const { firstName, lastName, username, email, password } = body;\n\n    if (!firstName || !lastName || !username) {\n      return c.json(\n        {\n          error: \"Missing required fields (firstName, lastName, username)\",\n        },\n        400\n      );\n    }\n\n    if (email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      return c.json({ error: \"Invalid email format\" }, 400);\n    }\n\n    let hashedPassword;\n    if (password) {\n      if (password.length < 6) {\n        return c.json({ error: \"Password must be at least 6 characters long\" }, 400);\n      }\n      hashedPassword = await bcrypt.hash(password, 10);\n    }\n\n    const editData = {\n      firstName,\n      lastName,\n      username,\n      email,\n      ...(hashedPassword && { password: hashedPassword }),\n    };\n\n    const updatedUser = await userRepository.editUser(userId, editData);\n    \n    return c.json({ \n      user: updatedUser,\n      message: \"User updated successfully\"\n    }, 200);\n    \n  } catch (error) {\n    console.error(\"Error in /editUser route:\", error);\n    if (error instanceof Error) {\n      return c.json({ error: error.message }, 500);\n    }\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\nusers.post(\"/changePassword\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const body = await c.req.json();\n    const { currentPassword, newPassword } = body;\n\n    if (!currentPassword || !newPassword) {\n      return c.json(\n        {\n          error: \"Missing required fields (currentPassword, newPassword)\",\n        },\n        400\n      );\n    }\n\n    if (newPassword.length < 6) {\n      return c.json({ error: \"New password must be at least 6 characters long\" }, 400);\n    }\n\n    const user = await userRepository.findById(userId);\n    if (!user) {\n      return c.json({ error: \"User not found\" }, 404);\n    }\n\n    const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n    if (!isValidPassword) {\n      return c.json({ error: \"Current password is incorrect\" }, 400);\n    }\n\n    const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n\n    const result = await userRepository.changePassword(userId, hashedNewPassword);\n    \n    return c.json(result, 200);\n    \n  } catch (error) {\n    console.error(\"Error in /changePassword route:\", error);\n    if (error instanceof Error) {\n      return c.json({ error: error.message }, 500);\n    }\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\nusers.post(\"/checkAvailability\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const body = await c.req.json();\n    const { username, email } = body;\n\n    if (!username && !email) {\n      return c.json(\n        {\n          error: \"At least username or email must be provided\",\n        },\n        400\n      );\n    }\n\n    const availability = await userRepository.checkAvailabilityForEdit(userId, username, email);\n    \n    return c.json(availability, 200);\n    \n  } catch (error) {\n    console.error(\"Error in /checkAvailability route:\", error);\n    if (error instanceof Error) {\n      return c.json({ error: error.message }, 500);\n    }\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\nexport default users;"]}