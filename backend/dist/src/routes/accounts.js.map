{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../src/routes/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hono } from \"hono\";\nimport { AccountsController } from \"../controllers/accountsController\";\nimport { verifyToken } from \"../middleware/auth\";\n\nconst accounts = new Hono();\nconst accountsController = new AccountsController();\n\naccounts.use(\"*\", verifyToken);\n\naccounts.get(\"/getAllAccounts\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const startDate = c.req.query(\"startDate\");\n    const endDate = c.req.query(\"endDate\");\n\n    let parsedStartDate: Date | undefined;\n    let parsedEndDate: Date | undefined;\n\n    if (startDate && endDate) {\n      try {\n        parsedStartDate = new Date(startDate);\n        parsedEndDate = new Date(endDate);\n\n        if (\n          isNaN(parsedStartDate.getTime()) ||\n          isNaN(parsedEndDate.getTime())\n        ) {\n          return c.json({ error: \"Invalid date format\" }, 400);\n        }\n\n        if (parsedStartDate > parsedEndDate) {\n          return c.json({ error: \"startDate must be before endDate\" }, 400);\n        }\n      } catch (error) {\n        return c.json({ error: \"Invalid date format\" }, 400);\n      }\n    }\n\n    return await accountsController.getAllAccounts(\n      c,\n      userId,\n      parsedStartDate,\n      parsedEndDate\n    );\n  } catch (error) {\n    console.error(\"Error in /getAllAccounts route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\naccounts.get(\"/getDefault\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    return await accountsController.getDefaultAccounts(c, userId);\n  } catch (error) {\n    console.error(\"Error in /getDefault route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\naccounts.get(\"/getSavings\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    return await accountsController.getSavingAccounts(c, userId);\n  } catch (error) {\n    console.error(\"Error in /getSavings route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\naccounts.post(\"/insertDefault\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const body = await c.req.json();\n    const { accountType, currencyType, name, description } = body;\n\n    if (!accountType || !currencyType || !name) {\n      return c.json({ error: \"Fill all necessary fields\" }, 400);\n    }\n\n    const account = await accountsController.createDefaultAccount(\n      c,\n      userId,\n      accountType,\n      currencyType,\n      name,\n      description || \"\"\n    );\n\n    return c.json(\n      {\n        message: \"Default account inserted successfully\",\n        account,\n      },\n      201\n    );\n  } catch (error) {\n    console.error(\"Error in /insertDefault route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\naccounts.post(\"/insertSaving\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const body = await c.req.json();\n    const {\n      accountType,\n      currencyType,\n      name,\n      description,\n      targetAmount,\n      targetDate,\n    } = body;\n\n    if (!accountType || !currencyType || !name || !targetAmount) {\n      return c.json({ error: \"Fill all necessary fields\" }, 400);\n    }\n\n    const account = await accountsController.createSavingAccount(\n      c,\n      userId,\n      accountType,\n      currencyType,\n      name,\n      description || \"\",\n      targetAmount,\n      targetDate\n    );\n\n    return c.json(\n      {\n        message: \"Saving account inserted successfully\",\n        account,\n      },\n      201\n    );\n  } catch (error) {\n    console.error(\"Error in /insertSaving route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\naccounts.get(\"/searchAccount\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const searchString = c.req.query(\"search\");\n\n    if (!searchString) {\n      return c.json({ error: \"Search string is required\" }, 400);\n    }\n\n    return await accountsController.searchAccountByString(\n      c,\n      userId,\n      searchString\n    );\n  } catch (error) {\n    console.error(\"Error in /searchAccount route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\naccounts.delete(\"/deleteDefaultAccount\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const accountId = c.req.query(\"accountId\");\n\n    if (!accountId || isNaN(Number(accountId))) {\n      return c.json({ error: \"Invalid or missing accountId\" }, 400);\n    }\n\n    await accountsController.deleteDefaultAccount(\n      c,\n      userId,\n      Number(accountId)\n    );\n\n    return c.json({ message: \"Account deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error in /deleteAccount route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\naccounts.delete(\"/deleteSavingAccount\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const accountId = c.req.query(\"accountId\");\n\n    if (!accountId || isNaN(Number(accountId))) {\n      return c.json({ error: \"Invalid or missing accountId\" }, 400);\n    }\n\n    await accountsController.deleteSavingAccount(\n      c,\n      userId,\n      Number(accountId)\n    );\n\n    return c.json({ message: \"Account deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error in /deleteAccount route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\naccounts.post(\"/editDefaultAccount\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const accountId = c.req.query(\"accountId\");\n    const body = await c.req.json();\n    const { name, description, currency, accountType, amount } = body;\n\n    if (!accountId || isNaN(Number(accountId))) {\n      return c.json({ error: \"Invalid or missing accountId\" }, 400);\n    }\n\n    if (!name) {\n      return c.json({ error: \"Name is required\" }, 400);\n    }\n\n    await accountsController.editDefaultAccount(\n      c,\n      userId,\n      Number(accountId),\n      name,\n      description || \"\",\n      currency,\n      accountType,\n      amount\n    );\n\n    return c.json({ message: \"Account edited successfully\" });\n  } catch (error) {\n    console.error(\"Error in /editDefaultAccount route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\naccounts.post(\"/editSavingAccount\", async (c) => {\n  try {\n    const userId = (c as any).get(\"userId\") as number;\n    const accountId = c.req.query(\"accountId\");\n    const body = await c.req.json();\n    console.log(\"Request Body:\", body);\n\n    const { name, description, currency, accountType } = body;\n\n    const targetAmount = body.savingAccount?.update?.targetAmount;\n    const targetDate = body.savingAccount?.update?.targetDate;\n\n    console.log(\"targetDate:\", targetDate);\n\n    if (!accountId || isNaN(Number(accountId))) {\n      return c.json({ error: \"Invalid or missing accountId\" }, 400);\n    }\n\n    if (!name) {\n      return c.json({ error: \"Name is required\" }, 400);\n    }\n\n    if (targetDate === undefined) {\n      return c.json({ error: \"Date is required\" }, 400);\n    }\n\n    await accountsController.editSavingAccount(\n      c,\n      userId,\n      Number(accountId),\n      name,\n      description || \"\",\n      currency,\n      accountType,\n      targetAmount,\n      new Date(targetDate)\n    );\n\n    return c.json({ message: \"Account edited successfully\" });\n  } catch (error) {\n    console.error(\"Error in /editSavingAccount route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\nexport default accounts;"]}