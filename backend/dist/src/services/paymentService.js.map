{"version":3,"file":"paymentService.js","sourceRoot":"","sources":["../../../src/services/paymentService.ts"],"names":[],"mappings":";;;AACA,2EAAwE;AAExE,MAAa,eAAe;IAClB,YAAY,CAAqB;IAEzC;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,uCAAkB,EAAE,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,MAAc,EACd,IAAY,EACZ,MAAc,EACd,WAA0B,EAC1B,SAAiB,EACjB,SAAe,EACf,SAAoB,EACpB,iBAA0B,EAC1B,eAAwB,EACxB,gBAAyB,EACzB,IAAiB,EACjB,QAAsB,EACtB,YAA6B,EAC7B,SAAkB;QAElB,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CACtD,MAAM,EACN,IAAI,EACJ,MAAM,EACN,WAAW,EACX,SAAS,EACT,SAAS,EACT,SAAS,EACT,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EAChB,IAAI,EACJ,QAAQ,EACR,YAAY,EACZ,SAAS,CACV,CAAC;YACF,OAAO,UAAU,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;YAChE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACnE,OAAO,WAAW,CAAC;QACrB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,MAAc,EAAE,SAAiB;QACnD,IAAI,CAAC;YACH,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CAC1D,MAAM,EACN,SAAS,CACV,CAAC;YACF,OAAO,cAAc,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;YAChE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;CACF;AArED,0CAqEC","sourcesContent":["import { CurrencyType, Frequency, PaymentType } from \"@prisma/client\";\nimport { PaymentsRepository } from \"../repositories/paymentsRepository\";\n\nexport class PaymentsService {\n  private paymentsRepo: PaymentsRepository;\n\n  constructor() {\n    this.paymentsRepo = new PaymentsRepository();\n  }\n\n  async createPayment(\n    userId: number,\n    name: string,\n    amount: number,\n    description: string | null,\n    accountId: number,\n    startDate: Date,\n    frequency: Frequency,\n    emailNotification: boolean,\n    notificationDay : number,\n    automaticPayment: boolean,\n    type: PaymentType,\n    currency: CurrencyType,\n    categoriesId: number[] | null,\n    paymentId?: number \n  ) {\n    try {\n      const newPayment = await this.paymentsRepo.createPayment(\n        userId,\n        name,\n        amount,\n        description,\n        accountId,\n        startDate,\n        frequency,\n        emailNotification,\n        notificationDay ,\n        automaticPayment,\n        type,\n        currency,\n        categoriesId,\n        paymentId\n      );\n      return newPayment;\n    } catch (error) {\n      console.error(\"Error in PaymentsService.createPayment:\", error);\n      throw new Error(\"Failed to create payment\");\n    }\n  }\n\n  async getAllPayments(userId: number) {\n    try {\n      const allPayments = await this.paymentsRepo.getAllPayments(userId);\n      return allPayments;\n    } catch (error) {\n      console.error(\"Error in PaymentsService.getAllPayments:\", error);\n      throw new Error(\"Failed to get all payments\");\n    }\n  }\n\n  async deletePayment(userId: number, paymentId: number) {\n    try {\n      const deletedPayment = await this.paymentsRepo.deletePayment(\n        userId,\n        paymentId\n      );\n      return deletedPayment;\n    } catch (error) {\n      console.error(\"Error in PaymentsService.deletePayment:\", error);\n      throw new Error(\"Failed to delete payment\");\n    }\n  }\n}\n"]}