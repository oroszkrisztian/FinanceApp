{"version":3,"file":"transactionService.js","sourceRoot":"","sources":["../../../src/services/transactionService.ts"],"names":[],"mappings":"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","sourcesContent":["import { CurrencyType, PrismaClient, TransactionType } from \"@prisma/client\";\nimport { TransactionRepository } from \"../repositories/transactionRepository\";\n\nexport class TransactionService {\n  private transactionRepo: TransactionRepository;\n\n  constructor() {\n    this.transactionRepo = new TransactionRepository();\n  }\n\n  async getUserAllTransactions(userId: number) {\n    try {\n      const allTransactions =\n        await this.transactionRepo.getUserAllTransactions(userId);\n\n      return allTransactions;\n    } catch (error) {\n      console.error(\n        \"Error in TransactionService.getUserAllTransactions:\",\n        error\n      );\n      throw new Error(\"Failed to add funds to default account\");\n    }\n  }\n\n  async addFundsDefaultAccount(\n    userId: number,\n    name: string,\n    description: string,\n    amount: number,\n    type: TransactionType,\n    toAccountId: number,\n    customCategoriesId: number[] | null,\n    currency: CurrencyType\n  ) {\n    try {\n      const newFundAccount = await this.transactionRepo.addFundsDefaultAccount(\n        userId,\n        name,\n        description,\n        amount,\n        type,\n        toAccountId,\n        customCategoriesId,\n        currency\n      );\n      return newFundAccount;\n    } catch (error) {\n      console.error(\n        \"Error in TransactionService.addFundsDefaultAccount:\",\n        error\n      );\n      throw new Error(\"Failed to add funds to default account\");\n    }\n  }\n\n  async addFundsSaving(\n    userId: number,\n    amount: number,\n    fromAccountId: number,\n    toSavingId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    try {\n      const savingTransaction = await this.transactionRepo.addFundsSaving(\n        userId,\n        amount,\n        fromAccountId,\n        toSavingId,\n        type,\n        currency\n      );\n      return savingTransaction;\n    } catch (error) {\n      console.error(\"Error in TransactionService.addFundsSaving:\", error);\n      throw new Error(\"Failed to add funds to savings account\");\n    }\n  }\n\n  async addFundsDefault(\n    userId: number,\n    amount: number,\n    fromSavingId: number,\n    toAccountId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    try {\n      const defaultTransaction = await this.transactionRepo.addFundsDefault(\n        userId,\n        amount,\n        fromSavingId,\n        toAccountId,\n        type,\n        currency\n      );\n      return defaultTransaction;\n    } catch (error) {\n      console.error(\"Error in TransactionService.addFundsDefault:\", error);\n      throw new Error(\"Failed to add funds to default account\");\n    }\n  }\n\n  async createExpense(\n    amount: number,\n    currency: CurrencyType,\n    userId: number,\n    name: string,\n    fromAccountId: number,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    try {\n      const expenseTransaction = await this.transactionRepo.createExpense(\n        amount,\n        currency,\n        userId,\n        name,\n        fromAccountId,\n        description,\n        customCategoriesId\n      );\n      return expenseTransaction;\n    } catch (error) {\n      console.error(\"Error in TransactionService.createExpense:\", error);\n      throw new Error(\"Failed to create expense\");\n    }\n  }\n\n  async transferFundsDefault(\n    userId: number,\n    amount: number,\n    fromAccountId: number,\n    toAccountId: number,\n    type: TransactionType,\n    currency: CurrencyType\n  ) {\n    try {\n      const transferTransaction =\n        await this.transactionRepo.transferFundsDefault(\n          userId,\n          amount,\n          fromAccountId,\n          toAccountId,\n          type,\n          currency\n        );\n      return transferTransaction;\n    } catch (error) {\n      console.error(\"Error in TransactionService.trasnferFundsDefault:\", error);\n      throw new Error(\"Failed to transfer funds\");\n    }\n  }\n  async executeRecurringPayment(\n    userId: number,\n    paymentId: number,\n    amount: number,\n    currency: CurrencyType,\n    fromAccountId: number,\n    name: string,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    try {\n      const transaction = await this.transactionRepo.executeRecurringPayment(\n        userId,\n        paymentId,\n        amount,\n        currency,\n        fromAccountId,\n        name,\n        description,\n        customCategoriesId\n      );\n      return transaction;\n    } catch (error) {\n      console.error(\n        \"Error in TransactionService.executeRecurringPayment:\",\n        error\n      );\n      throw new Error(\"Failed to execute recurring payment\");\n    }\n  }\n\n  async executeRecurringIncome(\n    userId: number,\n    paymentId: number,\n    amount: number,\n    currency: CurrencyType,\n    toAccountId: number,\n    name: string,\n    description: string | null,\n    customCategoriesId: number[] | null\n  ) {\n    try {\n      const transaction = await this.transactionRepo.executeRecurringIncome(\n        userId,\n        paymentId,\n        amount,\n        currency,\n        toAccountId,\n        name,\n        description,\n        customCategoriesId\n      );\n      return transaction;\n    } catch (error) {\n      console.error(\n        \"Error in TransactionService.executeRecurringIncome:\",\n        error\n      );\n      throw new Error(\"Failed to execute recurring income\");\n    }\n  }\n}\n"]}