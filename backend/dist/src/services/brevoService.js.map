{"version":3,"file":"brevoService.js","sourceRoot":"","sources":["../../../src/services/brevoService.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\n\ninterface EmailSender {\n  name: string;\n  email: string;\n}\n\ninterface EmailRecipient {\n  email: string;\n  name?: string;\n}\n\ninterface TransactionalEmailData {\n  sender: EmailSender;\n  to: EmailRecipient[];\n  subject: string;\n  htmlContent: string;\n  textContent?: string;\n  templateId?: number;\n  params?: Record<string, any>;\n  tags?: string[];\n}\n\ninterface BrevoEmailResponse {\n  messageId: string;\n}\n\ninterface ContactData {\n  email: string;\n  attributes?: Record<string, any>;\n  listIds?: number[];\n  updateEnabled?: boolean;\n}\n\ninterface BrevoApiError {\n  code: string;\n  message: string;\n}\n\nclass BrevoEmailService {\n  private client: AxiosInstance;\n  private apiKey: string;\n\n  constructor(apiKey: string) {\n    if (!apiKey) {\n      throw new Error('Brevo API key is required');\n    }\n    \n    this.apiKey = apiKey;\n    this.client = axios.create({\n      baseURL: 'https://api.brevo.com/v3',\n      headers: {\n        'accept': 'application/json',\n        'api-key': this.apiKey,\n        'content-type': 'application/json'\n      },\n      timeout: 10000 // 10 second timeout\n    });\n  }\n\n  async sendTransactionalEmail(emailData: TransactionalEmailData): Promise<BrevoEmailResponse> {\n    try {\n      const response: AxiosResponse<BrevoEmailResponse> = await this.client.post('/smtp/email', {\n        sender: emailData.sender,\n        to: emailData.to,\n        subject: emailData.subject,\n        htmlContent: emailData.htmlContent,\n        textContent: emailData.textContent,\n        templateId: emailData.templateId,\n        params: emailData.params,\n        tags: emailData.tags\n      });\n      \n      return response.data;\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || error.message;\n      const errorCode = error.response?.data?.code || 'UNKNOWN_ERROR';\n      \n      console.error('Brevo API Error:', {\n        code: errorCode,\n        message: errorMessage,\n        status: error.response?.status,\n        data: error.response?.data\n      });\n      \n      throw new Error(`Failed to send email via Brevo: ${errorMessage}`);\n    }\n  }\n\n  async addContact(contactData: ContactData): Promise<any> {\n    try {\n      const response = await this.client.post('/contacts', {\n        email: contactData.email,\n        attributes: contactData.attributes,\n        listIds: contactData.listIds,\n        updateEnabled: contactData.updateEnabled ?? true\n      });\n      \n      return response.data;\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || error.message;\n      console.error('Error adding contact to Brevo:', errorMessage);\n      throw new Error(`Failed to add contact: ${errorMessage}`);\n    }\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      await this.client.get('/account');\n      return true;\n    } catch (error) {\n      console.error('Brevo connection test failed:', error);\n      return false;\n    }\n  }\n}\n\nexport default BrevoEmailService;\nexport type { TransactionalEmailData, EmailSender, EmailRecipient, BrevoEmailResponse, ContactData };"]}