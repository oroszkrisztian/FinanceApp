{"version":3,"file":"accountsService.js","sourceRoot":"","sources":["../../../src/services/accountsService.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountType, CurrencyType } from \"@prisma/client\";\nimport { AccountsRepository } from \"../repositories/accountsRepository\";\n\nexport class AccountsService {\n  private accountRepo: AccountsRepository;\n\n  constructor() {\n    this.accountRepo = new AccountsRepository();\n  }\n\n  async getAllAccounts(userId: number, startDate?: Date, endDate?: Date) {\n    try {\n      return await this.accountRepo.getUserAllAccount(\n        userId,\n        startDate,\n        endDate\n      );\n    } catch (error) {\n      console.error(\"Service - Get accounts error:\", error);\n      throw error;\n    }\n  }\n\n  async getDefaultAccounts(userId: number) {\n    const accounts = await this.accountRepo.getUserDefaultAccounts(userId);\n    return accounts;\n  }\n\n  async getSavingAccounts(userId: number) {\n    const savingAccounts = await this.accountRepo.getUserSavingAccounts(userId);\n    return savingAccounts;\n  }\n\n  async createDefaultAccount(\n    userId: number,\n    accountType: AccountType,\n    currencyType: CurrencyType,\n    name: string,\n    description: string\n  ) {\n    try {\n      const newDefaultAccount = this.accountRepo.createDefaultAccount(\n        userId,\n        accountType,\n        currencyType,\n        name,\n        description\n      );\n      return newDefaultAccount;\n    } catch (error) {\n      console.error(\"Error in AccountsService.createDefaultAccount:\", error);\n      throw new Error(\"Failed to create default account\");\n    }\n  }\n\n  async createSavingAccount(\n    userId: number,\n    accountType: AccountType,\n    currencyType: CurrencyType,\n    name: string,\n    description: string,\n    targetAmount: number,\n    targetDate: Date\n  ) {\n    try {\n      const newDefaultAccount = this.accountRepo.createSavingAccount(\n        userId,\n        accountType,\n        currencyType,\n        name,\n        description,\n        targetAmount,\n        targetDate\n      );\n      return newDefaultAccount;\n    } catch (error) {\n      console.error(\"Error in AccountsService.createSavingAccount:\", error);\n      throw new Error(\"Failed to create saving account\");\n    }\n  }\n\n  async searchAccountByString(userId: number, searchString: string) {\n    try {\n      const accounts = await this.accountRepo.searchAccountByString(\n        userId,\n        searchString\n      );\n      return accounts;\n    } catch (error) {\n      console.error(\"Error in AccountsService.searchAccountByString:\", error);\n      throw new Error(\"Failed to search accounts\");\n    }\n  }\n\n  async deleteDefaultAccount(userId: number, accountId: number) {\n    try {\n      await this.accountRepo.deleteDefaultAccount(userId, accountId);\n    } catch (error) {\n      console.error(\"Error in AccountsService.deleteAccount:\", error);\n      throw new Error(\"Failed to delete account\");\n    }\n  }\n\n  async deleteSavingAccount(userId: number, accountId: number) {\n    try {\n      await this.accountRepo.deleteSavingAccount(userId, accountId);\n    } catch (error) {\n      console.error(\"Error in AccountsService.deleteSavingAccount:\", error);\n      throw new Error(\"Failed to delete saving account\");\n    }\n  }\n\n  async editDefaultAccount(\n    userId: number,\n    accountId: number,\n    name: string,\n    description: string,\n    currency: CurrencyType,\n    accountType: AccountType,\n    amount?: number\n  ) {\n    try {\n      await this.accountRepo.editDefaultAccount(\n        userId,\n        accountId,\n        name,\n        description,\n        currency,\n        accountType,\n        amount\n      );\n    } catch (error) {\n      console.error(\"Error in AccountsService.editDefaultAccount:\", error);\n      throw new Error(\"Failed to edit account\");\n    }\n  }\n\n  async editSavingAccount(\n    userId: number,\n    accountId: number,\n    name: string,\n    description: string,\n    currency: CurrencyType,\n    accountType: AccountType,\n    targetAmount: number,\n    targetDate: Date\n  ) {\n    try {\n      await this.accountRepo.editSavingAccount(\n        userId,\n        accountId,\n        name,\n        description,\n        currency,\n        accountType,\n        targetAmount,\n        targetDate\n      );\n    } catch (error) {\n      console.error(\"Error in AccountsService.editSavingAccount:\", error);\n      throw new Error(\"Failed to edit saving account\");\n    }\n  }\n}\n"]}