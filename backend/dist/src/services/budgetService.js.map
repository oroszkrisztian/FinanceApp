{"version":3,"file":"budgetService.js","sourceRoot":"","sources":["../../../src/services/budgetService.ts"],"names":[],"mappings":";;;AACA,uEAAoE;AAEpE,MAAa,aAAa;IAChB,gBAAgB,CAAmB;IAE3C;QACE,IAAI,CAAC,gBAAgB,GAAG,IAAI,mCAAgB,EAAE,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,MAAc;QAChC,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC3D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,8BAA8B,CAClC,MAAc,EACd,IAAY,EACZ,WAAmB,EACnB,QAAsB,EACtB,WAAqB;QAErB,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,8BAA8B,CAC/D,MAAM,EACN,IAAI,EACJ,WAAW,EACX,QAAQ,EACR,WAAW,CACZ,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CACT,wDAAwD,EACxD,KAAK,CACN,CAAC;YACF,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,MAAc,EAAE,QAAgB;QACrD,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACxE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;YAC/D,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,gBAAgB,CACpB,MAAc,EACd,QAAgB,EAChB,IAAY,EACZ,WAAmB,EACnB,QAAsB,EACtB,WAAqB;QAErB,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CACjD,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,WAAW,EACX,QAAQ,EACR,WAAW,CACZ,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;YAC/D,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;CACF;AAvED,sCAuEC","sourcesContent":["import { CurrencyType } from \"@prisma/client\";\nimport { BudgetRepository } from \"../repositories/budgetRepository\";\n\nexport class BudgetService {\n  private budgetRepository: BudgetRepository;\n\n  constructor() {\n    this.budgetRepository = new BudgetRepository();\n  }\n\n  async getAllBudgets(userId: number) {\n    try {\n      return await this.budgetRepository.getAllBudgets(userId);\n    } catch (error) {\n      console.log(\"Error in BudgetService.getAllBudgets:\", error);\n      throw new Error(\"Failed to get budgets\");\n    }\n  }\n\n  async createUserBudgetWithCategories(\n    userId: number,\n    name: string,\n    limitAmount: number,\n    currency: CurrencyType,\n    categoryIds: number[]\n  ) {\n    try {\n      return await this.budgetRepository.createUserBudgetWithCategories(\n        userId,\n        name,\n        limitAmount,\n        currency,\n        categoryIds\n      );\n    } catch (error) {\n      console.log(\n        \"Error in BudgetService.createUserBudgetWithCategories:\",\n        error\n      );\n      throw new Error(\"Failed to create budget\");\n    }\n  }\n\n  async deleteUserBudget(userId: number, budgetId: number) {\n    try {\n      return await this.budgetRepository.deleteUserBudget(userId, budgetId);\n    } catch (error) {\n      console.log(\"Error in BudgetService.deleteUserBudget:\", error);\n      throw new Error(\"Failed to delete budget\");\n    }\n  }\n\n  async updateUserBudget(\n    userId: number,\n    budgetId: number,\n    name: string,\n    limitAmount: number,\n    currency: CurrencyType,\n    categoryIds: number[]\n  ) {\n    try {\n      return await this.budgetRepository.updateUserBudget(\n        userId,\n        budgetId,\n        name,\n        limitAmount,\n        currency,\n        categoryIds\n      );\n    } catch (error) {\n      console.log(\"Error in BudgetService.updateUserBudget:\", error);\n      throw new Error(\"Failed to update budget\");\n    }\n  }\n}\n"]}