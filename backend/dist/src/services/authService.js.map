{"version":3,"file":"authService.js","sourceRoot":"","sources":["../../../src/services/authService.ts"],"names":[],"mappings":"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","sourcesContent":["import bcrypt from \"bcryptjs\";\nimport { sign, verify } from \"jsonwebtoken\";\nimport 'dotenv/config';\nimport { LoginCredentials, RegisterData, User } from \"../types/user\";\nimport { UserRepository } from \"../repositories/userRepository\";\n\nexport class AuthService {\n  private userRepository: UserRepository;\n\n  constructor() {\n    this.userRepository = new UserRepository();\n  }\n\n  async login(credentials: LoginCredentials) {\n    const user = await this.userRepository.findByUsername(credentials.username);\n    if (!user) {\n      throw new Error(\"Invalid username or password\");\n    }\n\n    const isValidPassword = await bcrypt.compare(\n      credentials.password,\n      user.password\n    );\n    if (!isValidPassword) {\n      throw new Error(\"Invalid username or password\");\n    }\n\n    const token = this.generateToken(user);\n    const { password: _, ...userWithoutPassword } = user;\n    return {\n      user: userWithoutPassword,\n      token,\n    };\n  }\n\n  async register(data: RegisterData) {\n    if (\n      !data.firstName ||\n      !data.lastName ||\n      !data.username ||\n      !data.email ||\n      !data.password\n    ) {\n      throw new Error(\"All fields are required\");\n    }\n\n    const existingUser = await this.userRepository.findByUsernameOrEmail(\n      data.username,\n      data.email\n    );\n    if (existingUser) {\n      if (existingUser.username === data.username) {\n        throw new Error(\"Username is already taken\");\n      }\n      if (existingUser.email === data.email) {\n        throw new Error(\"Email is already registered\");\n      }\n    }\n\n    const hashedPassword = await bcrypt.hash(data.password, 10);\n    const newUser = await this.userRepository.create({\n      ...data,\n      password: hashedPassword,\n    });\n\n    const token = this.generateToken(newUser);\n    const { password: _, ...userWithoutPassword } = newUser;\n    return {\n      user: userWithoutPassword,\n      token,\n    };\n  }\n\n  async refreshToken(oldToken: string) {\n    try {\n      const decoded = verify(oldToken, process.env.JWT_SECRET || \"your-secret-key\") as any;\n      const user = await this.userRepository.findById(decoded.userId);\n      \n      if (!user) {\n        throw new Error(\"User not found\");\n      }\n\n      const newToken = this.generateToken(user);\n      const { password: _, ...userWithoutPassword } = user;\n      \n      return {\n        user: userWithoutPassword,\n        token: newToken,\n      };\n    } catch (error) {\n      throw new Error(\"Invalid token\");\n    }\n  }\n\n  private generateToken(user: User) {\n    return sign(\n      { userId: user.id, username: user.username },\n      process.env.JWT_SECRET || \"your-secret-key\",\n      { expiresIn: \"24h\" }\n    );\n  }\n}"]}