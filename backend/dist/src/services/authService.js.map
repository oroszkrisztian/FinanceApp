{"version":3,"file":"authService.js","sourceRoot":"","sources":["../../../src/services/authService.ts"],"names":[],"mappings":"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","sourcesContent":["import bcrypt from \"bcryptjs\";\nimport { SignJWT, jwtVerify } from \"jose\";\nimport \"dotenv/config\";\nimport { LoginCredentials, RegisterData, User } from \"../types/user\";\nimport { UserRepository } from \"../repositories/userRepository\";\nimport LoginEmailService, { LoginEmailData } from \"./loginEmailService\";\nimport BrevoEmailService, { TransactionalEmailData } from \"./brevoService\";\nimport geoip from \"geoip-lite\";\n\nexport class AuthService {\n  private userRepository: UserRepository;\n  private loginEmailService: LoginEmailService;\n  private secret: Uint8Array;\n\n  constructor() {\n    this.userRepository = new UserRepository();\n    this.loginEmailService = new LoginEmailService();\n    this.secret = new TextEncoder().encode(\n      process.env.JWT_SECRET || \"your-secret-key\"\n    );\n  }\n\n  async login(\n    credentials: LoginCredentials,\n    ipAddress?: string,\n    userAgent?: string\n  ) {\n    const user = await this.userRepository.findByUsername(credentials.username);\n    if (!user) {\n      throw new Error(\"Invalid username or password\");\n    }\n\n    const isValidPassword = await bcrypt.compare(\n      credentials.password,\n      user.password\n    );\n    if (!isValidPassword) {\n      throw new Error(\"Invalid username or password\");\n    }\n\n    const token = await this.generateToken(user);\n    const { password: _, ...userWithoutPassword } = user;\n\n    // Look up location from IP address\n    let location: { country?: string; city?: string } | undefined = undefined;\n    if (ipAddress && ipAddress !== \"unknown\") {\n      const geo = geoip.lookup(ipAddress.split(\",\")[0].trim());\n      if (geo) {\n        location = {\n          country: geo.country,\n          city: geo.city,\n        };\n      }\n    }\n\n    // Send login notification email\n    try {\n      await this.loginEmailService.sendLoginNotification({\n        userEmail: user.email,\n        userName: `${user.firstName} ${user.lastName}`,\n        loginTime: new Date(),\n        ipAddress,\n        userAgent,\n        location,\n      });\n    } catch (error) {\n      console.error(\"Failed to send login email:\", error);\n      // Continue with login even if email fails\n    }\n\n    return {\n      user: userWithoutPassword,\n      token,\n    };\n  }\n\n  async register(data: RegisterData) {\n    if (\n      !data.firstName ||\n      !data.lastName ||\n      !data.username ||\n      !data.email ||\n      !data.password\n    ) {\n      throw new Error(\"All fields are required\");\n    }\n\n    const existingUser = await this.userRepository.findByUsernameOrEmail(\n      data.username,\n      data.email\n    );\n    if (existingUser) {\n      if (existingUser.username === data.username) {\n        throw new Error(\"Username is already taken\");\n      }\n      if (existingUser.email === data.email) {\n        throw new Error(\"Email is already registered\");\n      }\n    }\n\n    const hashedPassword = await bcrypt.hash(data.password, 10);\n    const newUser = await this.userRepository.create({\n      ...data,\n      password: hashedPassword,\n    });\n\n    const token = await this.generateToken(newUser);\n    const { password: _, ...userWithoutPassword } = newUser;\n    return {\n      user: userWithoutPassword,\n      token,\n    };\n  }\n\n  async refreshToken(oldToken: string) {\n    try {\n      const { payload } = await jwtVerify(oldToken, this.secret);\n      const user = await this.userRepository.findById(payload.userId as number);\n\n      if (!user) {\n        throw new Error(\"User not found\");\n      }\n\n      const newToken = await this.generateToken(user);\n      const { password: _, ...userWithoutPassword } = user;\n\n      return {\n        user: userWithoutPassword,\n        token: newToken,\n      };\n    } catch (error) {\n      throw new Error(\"Invalid token\");\n    }\n  }\n\n  private async generateToken(user: User) {\n    const token = await new SignJWT({\n      userId: user.id,\n      username: user.username,\n    })\n      .setProtectedHeader({ alg: \"HS256\" })\n      .setIssuedAt()\n      .setExpirationTime(\"24h\")\n      .sign(this.secret);\n\n    return token;\n  }\n}\n"]}