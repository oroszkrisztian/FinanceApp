{"version":3,"file":"expenseNotificationCron.js","sourceRoot":"","sources":["../../../src/services/expenseNotificationCron.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cron from 'node-cron';\nimport ExpenseNotificationService, { NotificationResult } from './expenseNotificationService';\n\ninterface SimpleCronConfig {\n  brevoApiKey: string;\n  senderEmail?: string;\n  senderName?: string;\n  timezone?: string;\n  dailyTime?: string; \n  enabled?: boolean;\n}\n\ninterface CronJobResult {\n  timestamp: Date;\n  result: NotificationResult;\n  duration: number; \n}\n\nclass SimplePaymentNotificationCron {\n  private notificationService: ExpenseNotificationService;\n  private config: Required<SimpleCronConfig>;\n  private job: cron.ScheduledTask | null = null;\n  private isRunning: boolean = false;\n  private lastResults: CronJobResult[] = [];\n\n  constructor(config: SimpleCronConfig) {\n    this.config = {\n      brevoApiKey: config.brevoApiKey,\n      senderEmail: config.senderEmail || 'noreply@yourapp.com',\n      senderName: config.senderName || 'Your Finance App',\n      timezone: config.timezone || 'Europe/Bucharest',\n      dailyTime: config.dailyTime || '08:00', // 8:00 AM\n      enabled: config.enabled ?? true\n    };\n\n    this.notificationService = new ExpenseNotificationService(\n      this.config.brevoApiKey,\n      this.config.senderEmail,\n      this.config.senderName\n    );\n  }\n\n  \n  start(): void {\n    if (this.isRunning) {\n      console.log('üîÑ Daily payment notification cron is already running');\n      return;\n    }\n\n    if (!this.config.enabled) {\n      console.log('‚è∏Ô∏è Daily payment notification cron is disabled');\n      return;\n    }\n\n    console.log('üöÄ Starting daily payment notification cron...');\n\n    try {\n      const [hour, minute] = this.config.dailyTime.split(':');\n      const cronExpression = `${minute} ${hour} * * *`; \n\n      this.job = cron.schedule(cronExpression, async () => {\n        await this.runDailyNotifications();\n      }, {\n        timezone: this.config.timezone\n      });\n\n      this.isRunning = true;\n      console.log(`‚úÖ Daily payment notifications scheduled for ${this.config.dailyTime} (${this.config.timezone})`);\n    } catch (error) {\n      console.error('‚ùå Failed to start daily cron job:', error);\n      throw error;\n    }\n  }\n\n  stop(): void {\n    if (this.job) {\n      console.log('üõë Stopping daily payment notification cron...');\n      this.job.stop();\n      this.job = null;\n      this.isRunning = false;\n      console.log('‚úÖ Daily cron job stopped');\n    }\n  }\n\n  private async runDailyNotifications(): Promise<void> {\n    const startTime = Date.now();\n    console.log('üìß Running daily payment notifications...');\n\n    try {\n      const result = await this.notificationService.sendDailyScheduledNotifications();\n\n      const duration = Date.now() - startTime;\n      const jobResult: CronJobResult = {\n        timestamp: new Date(),\n        result,\n        duration\n      };\n\n      this.lastResults.push(jobResult);\n      this.trimResults();\n\n      if (result.success > 0 || result.failed > 0) {\n        console.log(`‚úÖ Daily notifications completed: ${result.success} sent, ${result.failed} failed (${duration}ms)`);\n      } else {\n        console.log(`‚úÖ No notifications to send today (${duration}ms)`);\n      }\n    } catch (error) {\n      console.error('‚ùå Daily notifications failed:', error);\n    }\n  }\n\n  getStatus(): {\n    isRunning: boolean;\n    nextRun: string | null;\n    lastResults: CronJobResult[];\n    config: Required<SimpleCronConfig>;\n  } {\n    let nextRun = null;\n    if (this.job && this.isRunning) {\n      const [hour, minute] = this.config.dailyTime.split(':');\n      const now = new Date();\n      const next = new Date();\n      next.setHours(parseInt(hour), parseInt(minute), 0, 0);\n      \n      if (next <= now) {\n        next.setDate(next.getDate() + 1);\n      }\n      \n      nextRun = next.toLocaleString('en-US', { \n        timeZone: this.config.timezone,\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n\n    return {\n      isRunning: this.isRunning,\n      nextRun,\n      lastResults: this.lastResults.slice(-10), \n      config: this.config\n    };\n  }\n\n  updateConfig(newConfig: Partial<SimpleCronConfig>): void {\n    const wasRunning = this.isRunning;\n    \n    if (wasRunning) {\n      this.stop();\n    }\n\n    \n    Object.assign(this.config, newConfig);\n\n    if (newConfig.brevoApiKey || newConfig.senderEmail || newConfig.senderName) {\n      this.notificationService = new ExpenseNotificationService(\n        this.config.brevoApiKey,\n        this.config.senderEmail,\n        this.config.senderName\n      );\n    }\n\n    if (wasRunning && this.config.enabled) {\n      this.start();\n    }\n\n    console.log('üîÑ Configuration updated');\n  }\n\n  // Manual trigger for testing\n  async triggerManualRun(): Promise<NotificationResult> {\n    console.log('üîß Manual trigger: daily payment notifications');\n    await this.runDailyNotifications();\n    const lastResult = this.lastResults[this.lastResults.length - 1];\n    return lastResult?.result || { success: 0, failed: 0 };\n  }\n\n  // Enable/disable the cron job\n  setEnabled(enabled: boolean): void {\n    this.config.enabled = enabled;\n    \n    if (enabled && !this.isRunning) {\n      this.start();\n    } else if (!enabled && this.isRunning) {\n      this.stop();\n    }\n    \n    console.log(`${enabled ? '‚úÖ Enabled' : '‚è∏Ô∏è Disabled'} daily payment notifications`);\n  }\n\n\n  private trimResults(): void {\n    if (this.lastResults.length > 30) {\n      this.lastResults = this.lastResults.slice(-30);\n    }\n  }\n}\n\nexport default SimplePaymentNotificationCron;\nexport type { SimpleCronConfig, CronJobResult };"]}